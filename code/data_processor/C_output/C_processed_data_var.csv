static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	5	L	;	}	if	(	staticFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	{	double	VAR_0	=	*	VAR_0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	data	=	5	LL	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	while	(	1	)	{	data	=	5	;	break	;	}	while	(	1	)	{	printIntLine	(	data	)	;	break	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5	L	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	.	intOne	=	1	VAR_0	data	.	intTwo	=	2	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	data	.	intOne	)	VAR_0	printIntLine	(	data	.	intTwo	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	5	LL	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	5	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	1	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	dataPtr	=	(	twoIntsStruct	*	)	dataVoidPtr	;	twoIntsStruct	data	=	(	*	dataPtr	)	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	long	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	5	L	VAR_0	printLongLine	(	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	"	STRING	"	;	}	if	(	staticTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	L	"	STRING	"	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printWLine	(	data	)	;	}	else	{	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int64_t	*	dataPtr	=	(	int64_t	*	)	dataVoidPtr	;	int64_t	data	=	(	*	dataPtr	)	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	long	*	VAR_0	=	(	long	*	)	VAR_0	;	long	VAR_0	=	(	*	VAR_0	)	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	*	VAR_0	=	5.0	VAR_0	printDoubleLine	(	*	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodB2GSink	(	&	VAR_0	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	while	(	1	)	{	data	=	L	"	STRING	"	;	break	;	}	while	(	1	)	{	printWLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	5	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	;	printIntLine	(	data	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	goto	source	;	source	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	goto	sink	;	sink	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	{	long	VAR_0	=	*	VAR_0	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	char	*	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	"	STRING	"	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printLine	(	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	5.0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	(	double	*	)	VAR_0	;	double	VAR_0	=	(	*	VAR_0	)	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	while	(	1	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	break	;	}	while	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	data	=	L	"	STRING	"	;	}	if	(	staticTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	long	*	VAR_0	=	(	long	*	)	VAR_0	;	long	VAR_0	=	(	*	VAR_0	)	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	5	;	printIntLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5.0	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	else	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	LL	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	5	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	dataPtr	=	(	twoIntsStruct	*	)	dataVoidPtr	;	twoIntsStruct	data	=	(	*	dataPtr	)	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	data	=	5	;	}	if	(	1	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	VAR_0	=	"	STRING	"	;	}	if	(	1	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	.	intOne	=	1	VAR_0	data	.	intTwo	=	2	VAR_0	printIntLine	(	data	.	intOne	)	VAR_0	printIntLine	(	data	.	intTwo	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5.0	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	"	STRING	"	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLine	(	VAR_0	)	;	}	else	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	*	data	)	;	}	else	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	*	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	double	VAR_0	[	10	VAR_0	;	VAR_0	=	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	data	->	intOne	=	5	VAR_0	data	->	intTwo	=	6	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	data	->	intOne	)	VAR_0	printIntLine	(	data	->	intTwo	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	goto	source	;	source	:	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	goto	sink	;	sink	:	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	*	VAR_0	=	5.0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printDoubleLine	(	*	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	data	=	L	"	STRING	"	;	}	if	(	globalTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	5	LL	;	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	*	data	=	5	VAR_0	printIntLine	(	*	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	data	=	5	LL	;	}	if	(	staticTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	;	}	else	{	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	)	;	}	else	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	while	(	1	)	{	VAR_0	=	"	STRING	"	;	break	;	}	while	(	1	)	{	printLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	5.0	VAR_0	printDoubleLine	(	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	goto	source	;	source	:	VAR_0	=	"	STRING	"	;	goto	sink	;	sink	:	printLine	(	VAR_0	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int64_t	*	dataPtr	=	(	int64_t	*	)	dataVoidPtr	;	int64_t	data	=	(	*	dataPtr	)	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	5	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	double	VAR_0	[	10	VAR_0	;	VAR_0	=	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	while	(	1	)	{	VAR_0	=	5	L	;	break	;	}	while	(	1	)	{	printLongLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	while	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	break	;	}	while	(	1	)	{	printIntLine	(	*	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	goto	source	;	source	:	VAR_0	=	5.0	;	goto	sink	;	sink	:	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	1	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	{	char	*	VAR_0	=	*	VAR_0	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	data	=	L	"	STRING	"	;	}	if	(	1	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	staticTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	5	LL	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	data	=	5	LL	;	}	if	(	5	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	data	=	5	LL	;	}	if	(	globalTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	;	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	globalTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	wchar_t	*	*	dataPtr	=	(	wchar_t	*	*	)	dataVoidPtr	;	wchar_t	*	data	=	(	*	dataPtr	)	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	(	double	*	)	VAR_0	;	double	VAR_0	=	(	*	VAR_0	)	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	5.0	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	while	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	break	;	}	while	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	{	long	VAR_0	=	*	VAR_0	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5	L	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLine	(	VAR_0	)	;	}	else	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	"	STRING	"	;	}	if	(	globalTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	wchar_t	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	L	"	STRING	"	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printWLine	(	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	5	LL	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	"	STRING	"	;	break	;	}	switch	(	7	)	{	case	7	:	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	char	*	*	VAR_0	=	(	char	*	*	)	VAR_0	;	char	*	VAR_0	=	(	*	VAR_0	)	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	"	STRING	"	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	wchar_t	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	L	"	STRING	"	VAR_0	printWLine	(	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	;	double	*	VAR_0	=	(	*	VAR_0	)	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	5	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	5	L	;	}	if	(	staticTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	else	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	5	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	1	)	{	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	5	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	;	int	*	data	=	(	*	dataPtr	)	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	*	data	=	5	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	*	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	twoIntsStruct	data	=	*	dataPtr	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	5	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	goto	source	;	source	:	data	=	5	LL	;	goto	sink	;	sink	:	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	dataPtr	=	(	int	*	)	dataVoidPtr	;	int	data	=	(	*	dataPtr	)	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	staticTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	globalFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	LL	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	char	*	*	VAR_0	=	(	char	*	*	)	VAR_0	;	char	*	VAR_0	=	(	*	VAR_0	)	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	data	=	5	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	L	"	STRING	"	;	break	;	}	switch	(	7	)	{	case	7	:	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	;	int	*	data	=	(	*	dataPtr	)	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	;	twoIntsStruct	*	data	=	(	*	dataPtr	)	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	double	VAR_0	[	10	VAR_0	;	VAR_0	=	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	double	VAR_0	[	10	VAR_0	;	VAR_0	=	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	5	L	;	}	if	(	5	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	else	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	goto	source	;	source	:	data	=	L	"	STRING	"	;	goto	sink	;	sink	:	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	else	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	LL	;	printLongLongLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	while	(	1	)	{	data	=	5	LL	;	break	;	}	while	(	1	)	{	printLongLongLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	*	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	;	double	*	VAR_0	=	(	*	VAR_0	)	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	{	int	data	=	*	dataPtr	;	data	=	5	;	printIntLine	(	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	twoIntsStruct	data	=	*	dataPtr	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	staticFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	staticFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodG2BSink	(	&	VAR_0	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	wchar_t	*	data	=	*	dataPtr	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	5	L	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	long	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	5	L	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printLongLine	(	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	wchar_t	*	*	dataPtr	=	(	wchar_t	*	*	)	dataVoidPtr	;	wchar_t	*	data	=	(	*	dataPtr	)	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	wchar_t	*	data	=	*	dataPtr	;	printWLine	(	data	)	;	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	dataPtr	=	(	int	*	)	dataVoidPtr	;	int	data	=	(	*	dataPtr	)	;	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	;	twoIntsStruct	*	data	=	(	*	dataPtr	)	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	goto	source	;	source	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	goto	sink	;	sink	:	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	;	printIntLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	goto	source	;	source	:	data	=	5	;	goto	sink	;	sink	:	printIntLine	(	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	{	int	data	=	*	dataPtr	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	5	;	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	5	==	5	)	{	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodG2BSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	5	VAR_0	printIntLine	(	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	1	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodG2BSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	data	=	L	"	STRING	"	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	5	L	;	}	if	(	globalTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int64_t	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	5	LL	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printLongLongLine	(	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	{	double	VAR_0	=	*	VAR_0	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int64_t	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	5	LL	VAR_0	printLongLongLine	(	data	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodB2GSink	(	&	VAR_0	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	goto	source	;	source	:	VAR_0	=	5	L	;	goto	sink	;	sink	:	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	char	*	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	=	"	STRING	"	VAR_0	printLine	(	VAR_0	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	5	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	goto	source	;	source	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	goto	sink	;	sink	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	data	->	intOne	=	5	VAR_0	data	->	intTwo	=	6	VAR_0	printIntLine	(	data	->	intOne	)	VAR_0	printIntLine	(	data	->	intTwo	)	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	1	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	data	=	5	LL	;	}	if	(	globalFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	5	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	{	char	*	VAR_0	=	*	VAR_0	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	LL	;	}	else	{	data	=	5	LL	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLongLine	(	data	)	;	}	else	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	VAR_0	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	VAR_0	=	5	L	;	}	if	(	1	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	int64_t	data	=	*	dataPtr	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	data	=	5	LL	;	}	if	(	1	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_0	VAR_0	static	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	1	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FALSE	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsFalse	(	VAR_0	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	8	VAR_0	{	case	7	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodG2BSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	int64_t	data	=	*	dataPtr	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodG2BSink	(	&	VAR_0	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	data	=	5	LL	;	}	if	(	staticFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	staticTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFalse	VAR_0	{	printLine	(	"	STRING	"	VAR_0	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	while	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	break	;	}	while	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	5	L	;	}	if	(	globalFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	while	(	1	)	{	VAR_0	=	5.0	;	break	;	}	while	(	1	)	{	printDoubleLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_0	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	1	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_0	static	void	VAR_0	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_0	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	staticTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	default	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_badSink	(	&	VAR_0	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	data	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	*	data	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	{	char	*	VAR_0	=	*	VAR_0	;	printLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	;	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	int64_t	data	=	*	dataPtr	;	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_badSink	(	&	VAR_0	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	{	long	VAR_0	=	*	VAR_0	;	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	data	->	intOne	)	VAR_0	printIntLine	(	data	->	intTwo	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	VAR_0	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	data	.	intOne	)	VAR_0	printIntLine	(	data	.	intTwo	)	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	wchar_t	*	data	=	*	dataPtr	;	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printDoubleLine	(	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printWLine	(	data	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	*	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printLine	(	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_badSink	(	&	VAR_0	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	char	*	*	VAR_0	=	(	char	*	*	)	VAR_0	;	char	*	VAR_0	=	(	*	VAR_0	)	;	printLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	{	double	VAR_0	=	*	VAR_0	;	printDoubleLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	;	double	*	VAR_0	=	(	*	VAR_0	)	;	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	;	int	*	data	=	(	*	dataPtr	)	;	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	{	int	data	=	*	dataPtr	;	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int64_t	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printLongLongLine	(	data	)	VAR_0	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	VAR_0	[	VAR_0	]	=	(	double	)	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	long	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printLongLine	(	VAR_0	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printIntLine	(	*	data	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	;	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	5	LL	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLongLine	(	data	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	;	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	printLine	(	VAR_0	)	;	if	(	VAR_0	)	{	return	True	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_badSink	(	&	VAR_0	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	dataPtr	=	(	twoIntsStruct	*	)	dataVoidPtr	;	twoIntsStruct	data	=	(	*	dataPtr	)	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printLongLongLine	(	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_badSink	(	&	VAR_0	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	dataPtr	=	(	int	*	)	dataVoidPtr	;	int	data	=	(	*	dataPtr	)	;	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int64_t	*	dataPtr	=	(	int64_t	*	)	dataVoidPtr	;	int64_t	data	=	(	*	dataPtr	)	;	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	else	{	VAR_0	=	(	double	*	)	VAR_0	(	sizeof	(	double	)	)	;	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_0	=	5.0	;	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	)	)	{	VAR_0	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	printDoubleLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printDoubleLine	(	*	VAR_0	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	long	*	VAR_0	=	(	long	*	)	VAR_0	;	long	VAR_0	=	(	*	VAR_0	)	;	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	double	VAR_0	[	10	VAR_0	;	VAR_0	=	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	wchar_t	*	data	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printWLine	(	data	)	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printWLine	(	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticReturnsTrue	(	)	)	{	VAR_0	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	;	twoIntsStruct	*	data	=	(	*	dataPtr	)	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLine	(	VAR_0	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_64b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printLongLine	(	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	twoIntsStruct	data	=	*	dataPtr	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	1	)	{	VAR_0	}	if	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalTrue	)	{	VAR_0	}	if	(	globalTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	char	*	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	printLine	(	VAR_0	)	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_0	int	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	staticTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	wchar_t	*	*	dataPtr	=	(	wchar_t	*	*	)	dataVoidPtr	;	wchar_t	*	data	=	(	*	dataPtr	)	;	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	while	(	1	)	{	VAR_0	break	VAR_0	}	while	(	1	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_badSink	(	&	VAR_0	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	switch	(	6	)	{	case	6	:	VAR_0	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	switch	(	7	)	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	)	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	)	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	}	while	(	1	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_0	VAR_0	void	VAR_0	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_badSink	(	&	data	VAR_0	VAR_0	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	*	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticTrue	)	{	VAR_0	}	if	(	staticTrue	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrue	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	VAR_0	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_0	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	(	double	*	)	VAR_0	;	double	VAR_0	=	(	*	VAR_0	)	;	printDoubleLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_0	,	VAR_0	VAR_0	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	VAR_0	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	globalTrue	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	VAR_0	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	5	==	5	)	{	VAR_0	}	if	(	5	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	malloc	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	data	==	NULL	VAR_0	{	exit	(	-	1	VAR_0	VAR_0	}	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	5	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	globalFive	==	5	)	{	VAR_0	}	if	(	globalFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	*	data	VAR_0	data	=	(	int	*	VAR_0	ALLOCA	(	10	*	sizeof	(	int	VAR_0	VAR_0	VAR_0	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_0	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	else	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	=	VAR_0	VAR_0	}	}	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_0	;	double	VAR_0	[	10	VAR_0	;	VAR_0	=	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_badSink	(	&	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_0	if	(	staticFive	==	5	)	{	VAR_0	}	if	(	staticFive	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	globalFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	VAR_0	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_0	VAR_0	VAR_0	switch	(	6	VAR_0	{	case	6	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	switch	(	7	VAR_0	{	case	7	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	break	VAR_0	default	:	printLine	(	"	STRING	"	VAR_0	VAR_0	break	VAR_0	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	int	VAR_0	,	VAR_0	VAR_0	double	*	VAR_0	VAR_0	double	VAR_0	[	10	VAR_0	VAR_0	VAR_0	=	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	VAR_0	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	for	(	VAR_0	=	0	VAR_0	VAR_0	<	1	VAR_0	VAR_0	++	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	VAR_0	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_0	int	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	goto	source	VAR_0	source	:	VAR_0	goto	sink	VAR_0	sink	:	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	staticFive	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	VAR_0	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	VAR_0	VAR_0	(	10	*	sizeof	(	double	VAR_0	VAR_0	VAR_0	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	VAR_0	[	VAR_0	]	=	(	double	VAR_0	VAR_0	VAR_0	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printDoubleLine	(	VAR_0	[	VAR_0	]	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_0	{	twoIntsStruct	*	data	VAR_0	twoIntsStruct	dataUninitArray	[	10	]	VAR_0	data	=	dataUninitArray	VAR_0	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	(	10	/	2	VAR_0	VAR_0	VAR_0	++	VAR_0	{	data	[	VAR_0	]	.	intOne	=	VAR_0	VAR_0	data	[	VAR_0	]	.	intTwo	=	VAR_0	VAR_0	}	}	}	if	(	STATIC_CONST_TRUE	VAR_0	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	VAR_0	{	printIntLine	(	data	[	VAR_0	]	.	intOne	VAR_0	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	VAR_0	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_0	VAR_0	double	*	VAR_0	=	(	*	VAR_0	)	VAR_0	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	;	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_0	VAR_0	=	(	double	*	)	VAR_0	(	10	*	sizeof	(	double	)	)	VAR_0	if	(	STATIC_CONST_TRUE	)	{	VAR_0	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printDoubleLine	(	VAR_0	[	VAR_0	]	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_0	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_0	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_0	VAR_0	for	(	VAR_0	=	0	VAR_0	VAR_0	<	10	VAR_0	VAR_0	++	)	{	printIntLine	(	data	[	VAR_0	]	.	intOne	)	VAR_0	printIntLine	(	data	[	VAR_0	]	.	intTwo	)	VAR_0	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printDoubleLine	(	VAR_0	)	;	},1