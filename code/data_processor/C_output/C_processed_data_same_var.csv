static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsTrue	(	)	)	{	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_15	double	*	VAR_2	=	(	*	VAR_3	)	VAR_15	{	int	VAR_16	VAR_15	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_15	}	}	{	int	VAR_16	VAR_15	for	(	VAR_12	=	0	VAR_13	VAR_14	<	10	VAR_15	VAR_16	++	)	{	printDoubleLine	(	VAR_9	[	VAR_16	]	)	VAR_15	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_4	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_4	{	int	VAR_10	VAR_4	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_4	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodB2GSink	(	&	VAR_8	VAR_6	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_19	,	VAR_9	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_18	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	5	L	;	}	if	(	staticFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	{	double	VAR_0	=	*	VAR_1	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	data	=	5	LL	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	while	(	1	)	{	data	=	5	;	break	;	}	while	(	1	)	{	printIntLine	(	data	)	;	break	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5	L	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	VAR_14	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	twoIntsStruct	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	data	.	intOne	=	1	VAR_8	data	.	intTwo	=	2	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	data	.	intOne	)	VAR_8	printIntLine	(	data	.	intTwo	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_11	{	int	VAR_33	,	VAR_20	VAR_32	double	*	VAR_0	VAR_32	VAR_1	=	(	double	*	VAR_11	VAR_2	(	10	*	sizeof	(	double	VAR_11	VAR_11	VAR_32	if	(	VAR_26	==	NULL	VAR_11	{	exit	(	-	1	VAR_11	VAR_32	}	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	VAR_11	{	{	int	VAR_33	VAR_32	for	(	VAR_8	=	0	VAR_9	VAR_10	<	(	10	/	2	VAR_11	VAR_32	VAR_12	++	VAR_11	{	VAR_13	[	VAR_14	]	=	(	double	VAR_11	VAR_15	VAR_32	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	VAR_11	{	{	int	VAR_33	VAR_32	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	VAR_11	{	VAR_26	[	VAR_27	]	=	(	double	VAR_11	VAR_28	VAR_32	}	}	{	int	VAR_33	VAR_32	for	(	VAR_29	=	0	VAR_30	VAR_31	<	10	VAR_32	VAR_33	++	VAR_11	{	printDoubleLine	(	VAR_26	[	VAR_33	]	VAR_11	VAR_32	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	5	LL	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	5	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalReturnsTrue	(	)	)	{	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_7	VAR_5	static	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	if	(	VAR_9	==	NULL	VAR_7	{	exit	(	-	1	VAR_7	VAR_5	}	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodB2GSink	(	&	VAR_9	VAR_7	VAR_5	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	==	5	)	{	VAR_14	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	ALLOCA	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	==	5	)	{	VAR_14	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	1	)	{	VAR_14	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalTrue	)	{	VAR_14	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	goto	source	VAR_13	source	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	goto	sink	VAR_13	sink	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFive	==	5	)	{	VAR_14	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_25	,	VAR_12	VAR_24	double	*	VAR_0	VAR_24	double	VAR_1	[	10	VAR_2	VAR_24	VAR_18	=	VAR_1	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	VAR_24	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_13	=	0	VAR_14	VAR_15	<	10	VAR_16	VAR_17	++	)	{	VAR_18	[	VAR_19	VAR_2	=	(	double	)	VAR_20	VAR_24	}	}	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_18	[	VAR_25	VAR_2	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	while	(	1	)	{	VAR_14	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	1	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_11	{	int	VAR_33	,	VAR_20	VAR_32	double	*	VAR_0	VAR_32	VAR_1	=	(	double	*	VAR_11	VAR_2	(	10	*	sizeof	(	double	VAR_11	VAR_11	VAR_32	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	VAR_11	{	{	int	VAR_33	VAR_32	for	(	VAR_8	=	0	VAR_9	VAR_10	<	(	10	/	2	VAR_11	VAR_32	VAR_12	++	VAR_11	{	VAR_13	[	VAR_14	]	=	(	double	VAR_11	VAR_15	VAR_32	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	VAR_11	{	{	int	VAR_33	VAR_32	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	VAR_11	{	VAR_26	[	VAR_27	]	=	(	double	VAR_11	VAR_28	VAR_32	}	}	{	int	VAR_33	VAR_32	for	(	VAR_29	=	0	VAR_30	VAR_31	<	10	VAR_32	VAR_33	++	VAR_11	{	printDoubleLine	(	VAR_26	[	VAR_33	]	VAR_11	VAR_32	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	twoIntsStruct	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	dataPtr	=	(	twoIntsStruct	*	)	dataVoidPtr	;	twoIntsStruct	data	=	(	*	dataPtr	)	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	goto	source	VAR_8	source	:	VAR_8	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFive	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	switch	(	6	)	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	int	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	long	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	VAR_0	=	5	L	VAR_9	printLongLine	(	VAR_0	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	"	STRING	"	;	}	if	(	staticTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	L	"	STRING	"	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printWLine	(	data	)	;	}	else	{	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int64_t	*	dataPtr	=	(	int64_t	*	)	dataVoidPtr	;	int64_t	data	=	(	*	dataPtr	)	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	VAR_8	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	long	*	VAR_0	=	(	long	*	)	VAR_1	;	long	VAR_2	=	(	*	VAR_3	)	;	VAR_2	=	5	L	;	printLongLine	(	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	5	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_4	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_4	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_4	}	{	int	VAR_10	VAR_4	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_4	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodB2GSink	(	&	VAR_8	VAR_6	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	double	VAR_1	[	10	VAR_2	VAR_27	VAR_21	=	VAR_1	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_27	}	else	{	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	VAR_2	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_16	=	0	VAR_17	VAR_18	<	10	VAR_19	VAR_20	++	)	{	VAR_21	[	VAR_22	VAR_2	=	(	double	)	VAR_23	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	VAR_2	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	double	*	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	VAR_11	=	(	double	*	)	VAR_12	(	sizeof	(	double	)	)	VAR_9	if	(	VAR_11	==	NULL	)	{	exit	(	-	1	)	VAR_9	}	*	VAR_11	=	5.0	VAR_9	printDoubleLine	(	*	VAR_11	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	==	5	)	{	VAR_14	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_14	{	double	*	VAR_0	VAR_43	double	VAR_1	[	10	VAR_2	VAR_43	VAR_37	=	VAR_1	VAR_43	if	(	globalReturnsTrueOrFalse	(	VAR_14	VAR_14	{	{	int	VAR_44	VAR_43	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_43	VAR_7	++	VAR_14	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_14	VAR_10	VAR_43	}	}	}	else	{	{	int	VAR_44	VAR_43	for	(	VAR_11	=	0	VAR_12	VAR_13	<	(	10	/	2	VAR_14	VAR_43	VAR_15	++	VAR_14	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_14	VAR_18	VAR_43	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_14	VAR_14	{	{	int	VAR_44	VAR_43	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_14	{	VAR_24	[	VAR_25	VAR_2	=	(	double	VAR_14	VAR_26	VAR_43	}	}	{	int	VAR_44	VAR_43	for	(	VAR_27	=	0	VAR_28	VAR_29	<	10	VAR_30	VAR_31	++	VAR_14	{	printDoubleLine	(	VAR_37	[	VAR_44	VAR_2	VAR_14	VAR_43	}	}	}	else	{	{	int	VAR_44	VAR_43	for	(	VAR_32	=	0	VAR_33	VAR_34	<	10	VAR_35	VAR_36	++	VAR_14	{	VAR_37	[	VAR_38	VAR_2	=	(	double	VAR_14	VAR_39	VAR_43	}	}	{	int	VAR_44	VAR_43	for	(	VAR_40	=	0	VAR_41	VAR_42	<	10	VAR_43	VAR_44	++	VAR_14	{	printDoubleLine	(	VAR_37	[	VAR_44	VAR_2	VAR_14	VAR_43	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	twoIntsStruct	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	5	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodB2GSink	(	&	VAR_1	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_15	double	*	VAR_2	=	(	*	VAR_3	)	VAR_15	{	int	VAR_16	VAR_15	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_15	}	}	{	int	VAR_16	VAR_15	for	(	VAR_12	=	0	VAR_13	VAR_14	<	10	VAR_15	VAR_16	++	)	{	printDoubleLine	(	VAR_9	[	VAR_16	]	)	VAR_15	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFive	==	5	)	{	VAR_14	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	while	(	1	)	{	data	=	L	"	STRING	"	;	break	;	}	while	(	1	)	{	printWLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	5	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	0	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	switch	(	6	)	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFalse	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_1	;	VAR_1	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_1	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_1	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_1	}	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_1	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_15	double	*	VAR_2	=	(	*	VAR_3	)	VAR_15	{	int	VAR_16	VAR_15	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_15	}	}	{	int	VAR_16	VAR_15	for	(	VAR_12	=	0	VAR_13	VAR_14	<	10	VAR_15	VAR_16	++	)	{	printDoubleLine	(	VAR_9	[	VAR_16	]	)	VAR_15	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	data	=	5	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFalse	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	;	printIntLine	(	data	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	goto	source	;	source	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	goto	sink	;	sink	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	{	long	VAR_0	=	*	VAR_1	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	==	5	)	{	VAR_14	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_8	int	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_8	int	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_4	double	VAR_1	[	10	VAR_2	VAR_4	VAR_8	=	VAR_1	VAR_4	{	int	VAR_10	VAR_4	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_4	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodB2GSink	(	&	VAR_8	VAR_6	VAR_4	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	8	VAR_3	{	case	7	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	default	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	char	*	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_0	=	"	STRING	"	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printLine	(	VAR_0	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_19	,	VAR_9	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_18	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	8	VAR_3	{	case	7	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	default	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	VAR_16	[	VAR_17	]	=	(	double	)	VAR_18	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_7	VAR_5	static	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodB2GSink	(	&	VAR_9	VAR_7	VAR_5	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	VAR_16	==	NULL	)	{	exit	(	-	1	)	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	VAR_16	[	VAR_17	]	=	(	double	)	VAR_18	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	double	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_0	=	5.0	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printDoubleLine	(	VAR_0	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticReturnsFalse	(	VAR_6	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalTrue	)	{	VAR_14	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	(	double	*	)	VAR_1	;	double	VAR_2	=	(	*	VAR_3	)	;	VAR_2	=	5.0	;	printDoubleLine	(	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	while	(	1	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	break	;	}	while	(	1	)	{	printDoubleLine	(	*	VAR_1	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_27	}	else	{	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_16	=	0	VAR_17	VAR_18	<	10	VAR_19	VAR_20	++	)	{	VAR_21	[	VAR_22	]	=	(	double	)	VAR_23	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	data	=	L	"	STRING	"	;	}	if	(	staticTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	long	*	VAR_0	=	(	long	*	)	VAR_1	;	long	VAR_2	=	(	*	VAR_3	)	;	printLongLine	(	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	5	;	printIntLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	twoIntsStruct	*	data	VAR_28	twoIntsStruct	dataUninitArray	[	10	]	VAR_28	data	=	dataUninitArray	VAR_28	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_28	VAR_4	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_28	VAR_9	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	.	intOne	VAR_8	VAR_28	printIntLine	(	data	[	VAR_29	]	.	intTwo	VAR_8	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_25	=	0	VAR_26	VAR_27	<	10	VAR_28	VAR_29	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	.	intOne	VAR_8	VAR_28	printIntLine	(	data	[	VAR_29	]	.	intTwo	VAR_8	VAR_28	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_7	VAR_5	static	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	if	(	VAR_9	==	NULL	VAR_7	{	exit	(	-	1	VAR_7	VAR_5	}	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodB2GSink	(	&	VAR_9	VAR_7	VAR_5	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5.0	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	else	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_4	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_4	{	int	VAR_10	VAR_4	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_4	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodB2GSink	(	&	VAR_8	VAR_6	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFive	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	LL	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	5	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	dataPtr	=	(	twoIntsStruct	*	)	dataVoidPtr	;	twoIntsStruct	data	=	(	*	dataPtr	)	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalTrue	)	{	VAR_14	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	0	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FALSE	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_8	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_TRUE	)	{	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	data	=	5	;	}	if	(	1	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_8	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	VAR_0	=	"	STRING	"	;	}	if	(	1	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	twoIntsStruct	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	data	.	intOne	=	1	VAR_8	data	.	intTwo	=	2	VAR_8	printIntLine	(	data	.	intOne	)	VAR_8	printIntLine	(	data	.	intTwo	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5.0	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	"	STRING	"	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLine	(	VAR_0	)	;	}	else	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	*	data	)	;	}	else	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_1	;	VAR_1	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	VAR_7	[	VAR_8	]	=	(	double	)	VAR_9	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printDoubleLine	(	VAR_7	[	VAR_14	]	)	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	*	VAR_1	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	1	)	{	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	while	(	1	)	{	VAR_8	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	double	VAR_1	[	10	VAR_2	;	VAR_0	=	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	1	)	{	VAR_14	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	twoIntsStruct	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	data	->	intOne	=	5	VAR_8	data	->	intTwo	=	6	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	data	->	intOne	)	VAR_8	printIntLine	(	data	->	intTwo	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	VAR_24	,	VAR_14	VAR_23	twoIntsStruct	*	data	VAR_23	twoIntsStruct	dataUninitArray	[	10	]	VAR_23	data	=	dataUninitArray	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_23	VAR_9	++	VAR_8	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_8	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_8	VAR_23	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFive	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_8	int	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	VAR_24	,	VAR_14	VAR_23	int	*	data	VAR_23	data	=	(	int	*	VAR_8	ALLOCA	(	10	*	sizeof	(	int	VAR_8	VAR_8	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_23	VAR_9	++	VAR_8	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	printIntLine	(	data	[	VAR_24	]	VAR_8	VAR_23	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	int	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	goto	source	;	source	:	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	goto	sink	;	sink	:	printDoubleLine	(	*	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	8	VAR_3	{	case	7	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	default	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticTrue	)	{	VAR_14	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_12	VAR_11	double	*	VAR_0	VAR_11	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_6	=	(	double	*	)	VAR_7	(	sizeof	(	double	)	)	VAR_11	if	(	VAR_6	==	NULL	)	{	exit	(	-	1	)	VAR_11	}	*	VAR_6	=	5.0	VAR_11	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	printDoubleLine	(	*	VAR_6	)	VAR_11	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	0	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	int	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	data	=	L	"	STRING	"	;	}	if	(	globalTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	5	LL	;	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	VAR_7	[	VAR_8	]	=	(	double	)	VAR_9	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printDoubleLine	(	VAR_7	[	VAR_14	]	)	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	*	data	=	5	VAR_8	printIntLine	(	*	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	data	=	5	LL	;	}	if	(	staticTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_8	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	;	}	else	{	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	)	;	}	else	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	goto	source	VAR_8	source	:	VAR_8	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_4	double	VAR_1	[	10	VAR_2	VAR_4	VAR_8	=	VAR_1	VAR_4	{	int	VAR_10	VAR_4	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_4	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodB2GSink	(	&	VAR_8	VAR_6	VAR_4	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	while	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	}	while	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	break	VAR_22	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	while	(	1	)	{	VAR_0	=	"	STRING	"	;	break	;	}	while	(	1	)	{	printLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalTrue	)	{	VAR_14	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	double	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	VAR_0	=	5.0	VAR_9	printDoubleLine	(	VAR_0	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_1	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	switch	(	6	)	{	case	6	:	VAR_14	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_1	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_1	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	goto	source	;	source	:	VAR_0	=	"	STRING	"	;	goto	sink	;	sink	:	printLine	(	VAR_0	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int64_t	*	dataPtr	=	(	int64_t	*	)	dataVoidPtr	;	int64_t	data	=	(	*	dataPtr	)	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	8	VAR_3	{	case	7	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	default	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	5	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalReturnsTrue	(	)	)	{	VAR_14	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	double	VAR_2	[	10	VAR_3	;	VAR_1	=	VAR_2	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	while	(	1	)	{	VAR_0	=	5	L	;	break	;	}	while	(	1	)	{	printLongLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_1	;	VAR_1	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_15	double	*	VAR_2	=	(	*	VAR_3	)	VAR_15	{	int	VAR_16	VAR_15	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_15	}	}	{	int	VAR_16	VAR_15	for	(	VAR_12	=	0	VAR_13	VAR_14	<	10	VAR_15	VAR_16	++	)	{	printDoubleLine	(	VAR_9	[	VAR_16	]	)	VAR_15	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	while	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	break	;	}	while	(	1	)	{	printIntLine	(	*	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalReturnsFalse	(	VAR_6	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	double	VAR_1	[	10	VAR_2	VAR_27	VAR_16	=	VAR_1	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	VAR_16	[	VAR_17	VAR_2	=	(	double	)	VAR_18	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	VAR_2	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	VAR_2	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	while	(	1	)	{	VAR_8	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	double	VAR_2	[	10	VAR_3	VAR_7	VAR_9	=	VAR_2	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	VAR_3	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_19	,	VAR_9	VAR_18	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_18	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFive	==	5	)	{	VAR_14	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_25	,	VAR_12	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	VAR_24	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_13	=	0	VAR_14	VAR_15	<	10	VAR_16	VAR_17	++	)	{	VAR_18	[	VAR_19	]	=	(	double	)	VAR_20	VAR_24	}	}	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_18	[	VAR_25	]	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticReturnsFalse	(	VAR_6	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticTrue	)	{	VAR_14	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	goto	source	;	source	:	VAR_0	=	5.0	;	goto	sink	;	sink	:	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	1	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	switch	(	6	)	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	VAR_7	[	VAR_8	]	=	(	double	)	VAR_9	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printDoubleLine	(	VAR_7	[	VAR_14	]	)	VAR_13	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	{	char	*	VAR_0	=	*	VAR_1	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	data	=	L	"	STRING	"	;	}	if	(	1	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	staticTrue	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	5	LL	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	data	=	5	LL	;	}	if	(	5	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	6	)	{	case	6	:	VAR_14	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	data	=	5	LL	;	}	if	(	globalTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	0	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	5	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	==	5	)	{	VAR_14	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	6	)	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticTrue	)	{	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsTrue	(	)	)	{	VAR_14	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_8	int	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	goto	source	VAR_14	source	:	VAR_14	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	switch	(	7	VAR_6	{	case	7	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	;	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	globalTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFive	==	5	)	{	VAR_14	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalReturnsFalse	(	VAR_6	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	wchar_t	*	*	dataPtr	=	(	wchar_t	*	*	)	dataVoidPtr	;	wchar_t	*	data	=	(	*	dataPtr	)	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_1	int	dataUninitArray	[	10	]	VAR_1	data	=	dataUninitArray	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	(	double	*	)	VAR_1	;	double	VAR_2	=	(	*	VAR_3	)	;	printDoubleLine	(	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_7	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_24	if	(	VAR_13	==	NULL	)	{	exit	(	-	1	)	VAR_24	}	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	10	VAR_11	VAR_12	++	)	{	VAR_13	[	VAR_14	]	=	(	double	)	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_13	[	VAR_25	]	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	goto	source	VAR_14	source	:	VAR_14	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FALSE	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	5.0	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	while	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	break	;	}	while	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	int	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	{	long	VAR_0	=	*	VAR_1	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5	L	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLine	(	VAR_0	)	;	}	else	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	goto	source	VAR_22	source	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	goto	sink	VAR_22	sink	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	VAR_0	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	"	STRING	"	;	}	if	(	globalTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFalse	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	twoIntsStruct	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	wchar_t	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	data	=	L	"	STRING	"	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printWLine	(	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	goto	source	VAR_13	source	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	goto	sink	VAR_13	sink	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FALSE	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	twoIntsStruct	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticReturnsTrue	(	)	)	{	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodB2GSink	(	&	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	5	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_7	VAR_5	static	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	double	VAR_2	[	10	VAR_3	VAR_5	VAR_9	=	VAR_2	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	VAR_3	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodB2GSink	(	&	VAR_9	VAR_7	VAR_5	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	5	LL	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	"	STRING	"	;	break	;	}	switch	(	7	)	{	case	7	:	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	char	*	*	VAR_0	=	(	char	*	*	)	VAR_1	;	char	*	VAR_2	=	(	*	VAR_3	)	;	printLine	(	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	"	STRING	"	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalFive	==	5	)	{	VAR_14	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	VAR_7	[	VAR_8	]	=	(	double	)	VAR_9	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printDoubleLine	(	VAR_7	[	VAR_14	]	)	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	wchar_t	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	data	=	L	"	STRING	"	VAR_8	printWLine	(	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	;	double	*	VAR_2	=	(	*	VAR_3	)	;	printDoubleLine	(	*	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	5	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	VAR_0	=	5	L	;	}	if	(	staticTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalTrue	)	{	VAR_14	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	5	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_goodB2GSink	(	&	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	else	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	5	==	5	)	{	VAR_14	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	VAR_24	,	VAR_14	VAR_23	twoIntsStruct	*	data	VAR_23	data	=	(	twoIntsStruct	*	VAR_8	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_8	VAR_8	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_23	VAR_9	++	VAR_8	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_8	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_8	VAR_23	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	5	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	twoIntsStruct	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	5	==	5	)	{	VAR_14	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	switch	(	6	)	{	case	6	:	VAR_14	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	1	)	{	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	if	(	VAR_9	==	NULL	)	{	exit	(	-	1	)	VAR_7	}	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_2	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodG2BSink	(	&	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	if	(	VAR_9	==	NULL	)	{	exit	(	-	1	)	VAR_7	}	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	5	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	;	int	*	data	=	(	*	dataPtr	)	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	8	VAR_3	{	case	7	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	default	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	6	)	{	case	6	:	VAR_14	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	0	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	*	data	=	5	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	*	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	twoIntsStruct	data	=	*	dataPtr	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_19	,	VAR_9	VAR_18	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_18	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	5	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FALSE	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	6	)	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	goto	source	;	source	:	data	=	5	LL	;	goto	sink	;	sink	:	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	0	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	dataPtr	=	(	int	*	)	dataVoidPtr	;	int	data	=	(	*	dataPtr	)	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	staticTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_14	{	double	*	VAR_0	VAR_43	VAR_1	=	(	double	*	VAR_14	VAR_2	(	10	*	sizeof	(	double	VAR_14	VAR_14	VAR_43	if	(	globalReturnsTrueOrFalse	(	VAR_14	VAR_14	{	{	int	VAR_44	VAR_43	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_43	VAR_7	++	VAR_14	{	VAR_8	[	VAR_9	]	=	(	double	VAR_14	VAR_10	VAR_43	}	}	}	else	{	{	int	VAR_44	VAR_43	for	(	VAR_11	=	0	VAR_12	VAR_13	<	(	10	/	2	VAR_14	VAR_43	VAR_15	++	VAR_14	{	VAR_16	[	VAR_17	]	=	(	double	VAR_14	VAR_18	VAR_43	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_14	VAR_14	{	{	int	VAR_44	VAR_43	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_14	{	VAR_24	[	VAR_25	]	=	(	double	VAR_14	VAR_26	VAR_43	}	}	{	int	VAR_44	VAR_43	for	(	VAR_27	=	0	VAR_28	VAR_29	<	10	VAR_30	VAR_31	++	VAR_14	{	printDoubleLine	(	VAR_37	[	VAR_44	]	VAR_14	VAR_43	}	}	}	else	{	{	int	VAR_44	VAR_43	for	(	VAR_32	=	0	VAR_33	VAR_34	<	10	VAR_35	VAR_36	++	VAR_14	{	VAR_37	[	VAR_38	]	=	(	double	VAR_14	VAR_39	VAR_43	}	}	{	int	VAR_44	VAR_43	for	(	VAR_40	=	0	VAR_41	VAR_42	<	10	VAR_43	VAR_44	++	VAR_14	{	printDoubleLine	(	VAR_37	[	VAR_44	]	VAR_14	VAR_43	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	globalFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	LL	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	char	*	*	VAR_0	=	(	char	*	*	)	VAR_1	;	char	*	VAR_2	=	(	*	VAR_3	)	;	VAR_2	=	"	STRING	"	;	printLine	(	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	1	)	{	VAR_14	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	data	=	5	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	0	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_8	int	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	L	"	STRING	"	;	break	;	}	switch	(	7	)	{	case	7	:	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	;	int	*	data	=	(	*	dataPtr	)	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_8	int	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	;	twoIntsStruct	*	data	=	(	*	dataPtr	)	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	double	VAR_1	[	10	VAR_2	;	VAR_0	=	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	double	VAR_2	[	10	VAR_3	;	VAR_1	=	VAR_2	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	5	L	;	}	if	(	5	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_3	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_3	=	5.0	;	}	else	{	VAR_3	=	(	double	*	)	VAR_4	(	sizeof	(	double	)	)	;	if	(	VAR_3	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_3	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	*	VAR_3	)	;	}	else	{	printDoubleLine	(	*	VAR_3	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	switch	(	6	)	{	case	6	:	VAR_14	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	1	)	{	VAR_14	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	goto	source	;	source	:	data	=	L	"	STRING	"	;	goto	sink	;	sink	:	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_1	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_1	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_1	}	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	else	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodB2GSink	(	&	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	VAR_14	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	LL	;	printLongLongLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticTrue	)	{	VAR_14	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	while	(	1	)	{	data	=	5	LL	;	break	;	}	while	(	1	)	{	printLongLongLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	VAR_24	,	VAR_14	VAR_23	twoIntsStruct	*	data	VAR_23	data	=	(	twoIntsStruct	*	VAR_8	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_8	VAR_8	VAR_23	if	(	data	==	NULL	VAR_8	{	exit	(	-	1	VAR_8	VAR_23	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_23	VAR_9	++	VAR_8	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_8	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_8	VAR_23	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	*	VAR_1	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	switch	(	7	VAR_6	{	case	7	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	;	double	*	VAR_2	=	(	*	VAR_3	)	;	VAR_4	=	(	double	*	)	VAR_5	(	sizeof	(	double	)	)	;	if	(	VAR_4	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_4	=	5.0	;	printDoubleLine	(	*	VAR_4	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	}	while	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFive	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	while	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	}	while	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	break	VAR_22	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	{	int	data	=	*	dataPtr	;	data	=	5	;	printIntLine	(	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_1	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_1	twoIntsStruct	dataUninitArray	[	10	]	VAR_1	data	=	dataUninitArray	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_1	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	switch	(	7	VAR_6	{	case	7	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	goto	source	VAR_13	source	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	goto	sink	VAR_13	sink	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalTrue	)	{	VAR_14	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	1	)	{	VAR_14	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	5	==	5	)	{	VAR_14	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	5	==	5	)	{	VAR_14	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	5	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5	L	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	)	{	VAR_8	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_7	VAR_5	static	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	double	VAR_2	[	10	VAR_3	VAR_5	VAR_9	=	VAR_2	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	VAR_3	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodB2GSink	(	&	VAR_9	VAR_7	VAR_5	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	twoIntsStruct	data	=	*	dataPtr	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	0	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_TRUE	)	{	VAR_14	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	staticFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	staticFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_2	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodG2BSink	(	&	VAR_2	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	wchar_t	*	data	=	*	dataPtr	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	VAR_0	=	5	L	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	while	(	1	)	{	VAR_8	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	long	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_0	=	5	L	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printLongLine	(	VAR_0	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	*	data	VAR_28	data	=	(	int	*	VAR_8	ALLOCA	(	10	*	sizeof	(	int	VAR_8	VAR_8	VAR_28	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_28	VAR_4	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_28	VAR_9	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	VAR_8	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_25	=	0	VAR_26	VAR_27	<	10	VAR_28	VAR_29	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	VAR_8	VAR_28	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	goto	source	VAR_22	source	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	goto	sink	VAR_22	sink	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalTrue	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_8	=	VAR_1	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	VAR_7	[	VAR_8	]	=	(	double	)	VAR_9	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printDoubleLine	(	VAR_7	[	VAR_14	]	)	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	int	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	0	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	goto	source	VAR_8	source	:	VAR_8	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	VAR_8	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	VAR_21	==	NULL	)	{	exit	(	-	1	)	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_27	}	else	{	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_16	=	0	VAR_17	VAR_18	<	10	VAR_19	VAR_20	++	)	{	VAR_21	[	VAR_22	]	=	(	double	)	VAR_23	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_7	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	double	VAR_1	[	10	VAR_2	VAR_24	VAR_13	=	VAR_1	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	10	VAR_11	VAR_12	++	)	{	VAR_13	[	VAR_14	VAR_2	=	(	double	)	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_13	[	VAR_25	VAR_2	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	double	VAR_2	[	10	VAR_3	VAR_7	VAR_9	=	VAR_2	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	VAR_3	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_14	{	double	*	VAR_0	VAR_43	VAR_1	=	(	double	*	VAR_14	VAR_2	(	10	*	sizeof	(	double	VAR_14	VAR_14	VAR_43	if	(	VAR_37	==	NULL	VAR_14	{	exit	(	-	1	VAR_14	VAR_43	}	if	(	globalReturnsTrueOrFalse	(	VAR_14	VAR_14	{	{	int	VAR_44	VAR_43	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_43	VAR_7	++	VAR_14	{	VAR_8	[	VAR_9	]	=	(	double	VAR_14	VAR_10	VAR_43	}	}	}	else	{	{	int	VAR_44	VAR_43	for	(	VAR_11	=	0	VAR_12	VAR_13	<	(	10	/	2	VAR_14	VAR_43	VAR_15	++	VAR_14	{	VAR_16	[	VAR_17	]	=	(	double	VAR_14	VAR_18	VAR_43	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_14	VAR_14	{	{	int	VAR_44	VAR_43	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_14	{	VAR_24	[	VAR_25	]	=	(	double	VAR_14	VAR_26	VAR_43	}	}	{	int	VAR_44	VAR_43	for	(	VAR_27	=	0	VAR_28	VAR_29	<	10	VAR_30	VAR_31	++	VAR_14	{	printDoubleLine	(	VAR_37	[	VAR_44	]	VAR_14	VAR_43	}	}	}	else	{	{	int	VAR_44	VAR_43	for	(	VAR_32	=	0	VAR_33	VAR_34	<	10	VAR_35	VAR_36	++	VAR_14	{	VAR_37	[	VAR_38	]	=	(	double	VAR_14	VAR_39	VAR_43	}	}	{	int	VAR_44	VAR_43	for	(	VAR_40	=	0	VAR_41	VAR_42	<	10	VAR_43	VAR_44	++	VAR_14	{	printDoubleLine	(	VAR_37	[	VAR_44	]	VAR_14	VAR_43	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_7	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	10	VAR_11	VAR_12	++	)	{	VAR_13	[	VAR_14	]	=	(	double	)	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_13	[	VAR_25	]	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	wchar_t	*	*	dataPtr	=	(	wchar_t	*	*	)	dataVoidPtr	;	wchar_t	*	data	=	(	*	dataPtr	)	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFive	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	ALLOCA	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_8	=	VAR_1	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	5	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	int	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_TRUE	)	{	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticTrue	)	{	VAR_14	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_25	,	VAR_12	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_24	if	(	VAR_18	==	NULL	)	{	exit	(	-	1	)	VAR_24	}	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	VAR_24	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_13	=	0	VAR_14	VAR_15	<	10	VAR_16	VAR_17	++	)	{	VAR_18	[	VAR_19	]	=	(	double	)	VAR_20	VAR_24	}	}	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_18	[	VAR_25	]	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_19	,	VAR_9	VAR_18	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_18	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	twoIntsStruct	*	data	VAR_28	data	=	(	twoIntsStruct	*	VAR_8	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_8	VAR_8	VAR_28	if	(	data	==	NULL	VAR_8	{	exit	(	-	1	VAR_8	VAR_28	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_28	VAR_4	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_28	VAR_9	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	.	intOne	VAR_8	VAR_28	printIntLine	(	data	[	VAR_29	]	.	intTwo	VAR_8	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_25	=	0	VAR_26	VAR_27	<	10	VAR_28	VAR_29	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	.	intOne	VAR_8	VAR_28	printIntLine	(	data	[	VAR_29	]	.	intTwo	VAR_8	VAR_28	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	wchar_t	*	data	=	*	dataPtr	;	printWLine	(	data	)	;	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	double	VAR_2	[	10	VAR_3	VAR_7	VAR_9	=	VAR_2	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	VAR_3	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	1	)	{	VAR_14	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_TRUE	)	{	VAR_14	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	*	data	VAR_28	data	=	(	int	*	VAR_8	malloc	(	10	*	sizeof	(	int	VAR_8	VAR_8	VAR_28	if	(	data	==	NULL	VAR_8	{	exit	(	-	1	VAR_8	VAR_28	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_28	VAR_4	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_28	VAR_9	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	VAR_8	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_25	=	0	VAR_26	VAR_27	<	10	VAR_28	VAR_29	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	VAR_8	VAR_28	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFive	==	5	)	{	VAR_14	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	globalFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	switch	(	6	)	{	case	6	:	VAR_14	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	if	(	VAR_9	==	NULL	)	{	exit	(	-	1	)	VAR_7	}	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	dataPtr	=	(	int	*	)	dataVoidPtr	;	int	data	=	(	*	dataPtr	)	;	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_7	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	double	VAR_1	[	10	VAR_2	VAR_24	VAR_13	=	VAR_1	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	10	VAR_11	VAR_12	++	)	{	VAR_13	[	VAR_14	VAR_2	=	(	double	)	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_13	[	VAR_25	VAR_2	)	VAR_24	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	;	twoIntsStruct	*	data	=	(	*	dataPtr	)	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	goto	source	;	source	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	goto	sink	;	sink	:	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFive	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	goto	source	VAR_13	source	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	goto	sink	VAR_13	sink	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticReturnsFalse	(	VAR_6	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	long	VAR_1	;	VAR_1	=	5	L	;	CWE457_Use_of_Uninitialized_Variable__long_64b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	=	5	;	printIntLine	(	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	L	"	STRING	"	;	}	if	(	staticReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFalse	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	5	L	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_TRUE	)	{	VAR_14	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	5	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_1	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_1	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_1	}	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticFive	==	5	)	{	VAR_14	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	goto	source	;	source	:	data	=	5	;	goto	sink	;	sink	:	printIntLine	(	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	malloc	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	staticFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	{	int	data	=	*	dataPtr	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	VAR_24	,	VAR_14	VAR_23	int	*	data	VAR_23	int	dataUninitArray	[	10	]	VAR_23	data	=	dataUninitArray	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_23	VAR_9	++	VAR_8	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	printIntLine	(	data	[	VAR_24	]	VAR_8	VAR_23	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	5	;	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	5	;	printIntLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_8	=	VAR_1	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	8	VAR_3	{	case	7	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	default	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	VAR_0	=	5.0	;	CWE457_Use_of_Uninitialized_Variable__double_64b_goodG2BSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	data	=	5	;	}	if	(	globalTrue	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	5	==	5	)	{	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodG2BSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_8	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	switch	(	6	)	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	if	(	VAR_9	==	NULL	)	{	exit	(	-	1	)	VAR_7	}	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_4	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_4	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_4	}	{	int	VAR_10	VAR_4	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_4	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_goodB2GSink	(	&	VAR_8	VAR_6	VAR_4	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	VAR_7	[	VAR_8	]	=	(	double	)	VAR_9	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printDoubleLine	(	VAR_7	[	VAR_14	]	)	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	;	printDoubleLine	(	*	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsFalse	(	VAR_3	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_14	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalFalse	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_8	=	VAR_1	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	data	=	5	VAR_8	printIntLine	(	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticTrue	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	*	data	VAR_28	int	dataUninitArray	[	10	]	VAR_28	data	=	dataUninitArray	VAR_28	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_28	VAR_4	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_28	VAR_9	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	VAR_8	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	data	[	VAR_29	]	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_25	=	0	VAR_26	VAR_27	<	10	VAR_28	VAR_29	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	VAR_8	VAR_28	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	1	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_8	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	switch	(	8	VAR_6	{	case	7	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	default	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	break	VAR_22	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	while	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	}	while	(	1	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	break	VAR_22	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsTrue	(	)	)	{	VAR_14	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_8	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_1	;	VAR_1	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__long_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	VAR_16	[	VAR_17	]	=	(	double	)	VAR_18	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_goodG2BSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	1	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_15	double	*	VAR_2	=	(	*	VAR_3	)	VAR_15	{	int	VAR_16	VAR_15	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_15	}	}	{	int	VAR_16	VAR_15	for	(	VAR_12	=	0	VAR_13	VAR_14	<	10	VAR_15	VAR_16	++	)	{	printDoubleLine	(	VAR_9	[	VAR_16	]	)	VAR_15	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	double	VAR_1	[	10	VAR_2	VAR_27	VAR_16	=	VAR_1	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	VAR_16	[	VAR_17	VAR_2	=	(	double	)	VAR_18	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	VAR_2	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	VAR_2	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalTrue	)	{	VAR_8	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	data	=	L	"	STRING	"	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	VAR_0	=	5	L	;	}	if	(	globalTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	twoIntsStruct	dataUninitArray	[	10	]	VAR_4	data	=	dataUninitArray	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int64_t	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	data	=	5	LL	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printLongLongLine	(	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_2	=	5.0	;	printDoubleLine	(	*	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	VAR_4	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_4	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	VAR_14	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	LL	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	{	double	VAR_0	=	*	VAR_1	;	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_3	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_3	=	5.0	;	printDoubleLine	(	*	VAR_3	)	;	}	else	{	VAR_3	=	(	double	*	)	VAR_4	(	sizeof	(	double	)	)	;	if	(	VAR_3	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_3	=	5.0	;	printDoubleLine	(	*	VAR_3	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int64_t	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	data	=	5	LL	VAR_8	printLongLongLine	(	data	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	5	==	5	)	{	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_TRUE	)	{	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	1	)	{	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	1	)	{	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticTrue	)	{	VAR_14	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	goto	source	VAR_13	source	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	goto	sink	VAR_13	sink	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_7	VAR_5	static	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodB2GSink	(	&	VAR_9	VAR_7	VAR_5	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	goto	source	;	source	:	VAR_0	=	5	L	;	goto	sink	;	sink	:	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	globalTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalFalse	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	char	*	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	VAR_0	=	"	STRING	"	VAR_9	printLine	(	VAR_0	)	VAR_9	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	==	5	)	{	VAR_14	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	switch	(	6	)	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	VAR_16	==	NULL	)	{	exit	(	-	1	)	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	VAR_16	[	VAR_17	]	=	(	double	)	VAR_18	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_16	[	VAR_28	]	)	VAR_27	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	5	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	int	VAR_24	,	VAR_14	VAR_23	int	*	data	VAR_23	data	=	(	int	*	VAR_8	malloc	(	10	*	sizeof	(	int	VAR_8	VAR_8	VAR_23	if	(	data	==	NULL	VAR_8	{	exit	(	-	1	VAR_8	VAR_23	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_23	VAR_9	++	VAR_8	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	printIntLine	(	data	[	VAR_24	]	VAR_8	VAR_23	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	goto	source	;	source	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	goto	sink	;	sink	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	twoIntsStruct	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	data	->	intOne	=	5	VAR_8	data	->	intTwo	=	6	VAR_8	printIntLine	(	data	->	intOne	)	VAR_8	printIntLine	(	data	->	intTwo	)	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	1	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	1	)	{	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	)	{	VAR_8	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	break	VAR_8	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	5	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	data	=	5	LL	;	}	if	(	globalFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_14	VAR_18	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_4	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_19	,	VAR_9	VAR_18	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_18	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	goto	source	VAR_22	source	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	goto	sink	VAR_22	sink	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	switch	(	8	VAR_6	{	case	7	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	default	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	break	VAR_22	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	default	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	break	VAR_14	}	switch	(	7	)	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	)	VAR_14	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	5	==	5	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodB2GSink	(	&	VAR_1	)	;	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_1	int	dataUninitArray	[	10	]	VAR_1	data	=	dataUninitArray	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	VAR_8	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	{	char	*	VAR_0	=	*	VAR_1	;	printLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	;	}	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	data	=	5	LL	;	}	else	{	data	=	5	LL	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLongLine	(	data	)	;	}	else	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodB2GSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	)	{	case	6	:	VAR_8	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticTrue	)	{	VAR_8	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	staticTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	break	VAR_13	default	:	printLine	(	"	STRING	"	VAR_3	VAR_13	break	VAR_13	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	VAR_0	=	5.0	;	}	if	(	1	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	;	printIntLine	(	*	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	VAR_16	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_22	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	5	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	VAR_0	=	5	L	;	}	if	(	1	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	data	=	L	"	STRING	"	;	}	if	(	staticFive	==	5	)	{	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	int64_t	data	=	*	dataPtr	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	goto	source	VAR_8	source	:	VAR_8	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_1	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_1	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_1	}	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_1	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	data	=	5	;	}	if	(	5	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	data	=	5	LL	;	}	if	(	1	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodB2GSink	(	&	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_14	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_4	VAR_2	static	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	malloc	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodB2GSink	(	&	data	VAR_4	VAR_2	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_63b_goodB2GSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	staticFive	==	5	)	{	VAR_8	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	1	)	{	printLongLine	(	VAR_0	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_15	double	*	VAR_2	=	(	*	VAR_3	)	VAR_15	{	int	VAR_16	VAR_15	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	]	=	(	double	)	VAR_11	VAR_15	}	}	{	int	VAR_16	VAR_15	for	(	VAR_12	=	0	VAR_13	VAR_14	<	10	VAR_15	VAR_16	++	)	{	printDoubleLine	(	VAR_9	[	VAR_16	]	)	VAR_15	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	while	(	1	)	{	VAR_8	break	VAR_8	}	while	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	while	(	1	)	{	VAR_14	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	while	(	1	)	{	VAR_14	break	VAR_14	}	while	(	1	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	break	VAR_14	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_11	{	int	VAR_33	,	VAR_20	VAR_32	double	*	VAR_0	VAR_32	double	VAR_1	[	10	VAR_2	VAR_32	VAR_26	=	VAR_1	VAR_32	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	VAR_11	{	{	int	VAR_33	VAR_32	for	(	VAR_8	=	0	VAR_9	VAR_10	<	(	10	/	2	VAR_11	VAR_32	VAR_12	++	VAR_11	{	VAR_13	[	VAR_14	VAR_2	=	(	double	VAR_11	VAR_15	VAR_32	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	VAR_11	{	{	int	VAR_33	VAR_32	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	VAR_11	{	VAR_26	[	VAR_27	VAR_2	=	(	double	VAR_11	VAR_28	VAR_32	}	}	{	int	VAR_33	VAR_32	for	(	VAR_29	=	0	VAR_30	VAR_31	<	10	VAR_32	VAR_33	++	VAR_11	{	printDoubleLine	(	VAR_26	[	VAR_33	VAR_2	VAR_11	VAR_32	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	{	int	VAR_10	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_6	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_goodG2BSink	(	&	VAR_8	)	VAR_6	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	STATIC_CONST_FALSE	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	globalReturnsFalse	(	VAR_6	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	double	VAR_1	[	10	VAR_2	VAR_22	VAR_16	=	VAR_1	VAR_22	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_22	}	}	break	VAR_22	default	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	}	switch	(	8	VAR_6	{	case	7	:	printLine	(	"	STRING	"	VAR_6	VAR_22	break	VAR_22	default	:	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	VAR_2	VAR_6	VAR_22	}	}	break	VAR_22	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	data	=	5	;	CWE457_Use_of_Uninitialized_Variable__int_64b_goodG2BSink	(	&	data	)	;	},0
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	int64_t	data	=	*	dataPtr	;	data	=	5	LL	;	printLongLongLine	(	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	)	{	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	data	=	5	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_goodB2GSink	(	&	VAR_2	)	;	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	)	{	VAR_8	}	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	VAR_7	static	void	VAR_0	(	)	{	double	*	VAR_1	VAR_7	double	VAR_2	[	10	VAR_3	VAR_7	VAR_9	=	VAR_2	VAR_7	{	int	VAR_11	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	VAR_9	[	VAR_10	VAR_3	=	(	double	)	VAR_11	VAR_7	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_goodG2BSink	(	&	VAR_9	)	VAR_7	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	data	=	5	LL	;	}	if	(	staticFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	data	=	5	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	}	if	(	staticTrue	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsTrue	(	)	)	{	VAR_14	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	char	*	VAR_1	;	VAR_1	=	"	STRING	"	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_goodG2BSink	(	&	VAR_1	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticReturnsTrue	(	)	)	{	VAR_14	}	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	VAR_0	=	"	STRING	"	;	}	if	(	STATIC_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_13	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_13	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	}	if	(	GLOBAL_CONST_FIVE	!=	5	VAR_3	{	printLine	(	"	STRING	"	VAR_3	VAR_13	}	else	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	.	intOne	=	VAR_14	VAR_13	data	[	VAR_14	]	.	intTwo	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	.	intOne	VAR_3	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	VAR_0	=	5.0	;	}	if	(	5	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	goto	source	VAR_13	source	:	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	goto	sink	VAR_13	sink	:	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFive	==	5	)	{	VAR_14	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	)	)	{	VAR_8	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_13	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_13	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_13	VAR_4	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_14	VAR_13	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_14	]	=	VAR_14	VAR_13	}	}	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_14	]	VAR_3	VAR_13	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5.0	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	8	)	{	case	7	:	printLine	(	"	STRING	"	)	;	break	;	default	:	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_goodB2GSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_22	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_22	if	(	staticTrue	VAR_6	{	{	int	VAR_23	VAR_22	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_22	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_22	}	}	}	if	(	staticFalse	VAR_6	{	printLine	(	"	STRING	"	VAR_6	VAR_22	}	else	{	{	int	VAR_23	VAR_22	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_22	}	}	{	int	VAR_23	VAR_22	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_16	[	VAR_23	]	VAR_6	VAR_22	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	while	(	1	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	break	;	}	while	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	data	=	5	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticTrue	)	{	VAR_14	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_7	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	10	VAR_11	VAR_12	++	)	{	VAR_13	[	VAR_14	]	=	(	double	)	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_13	[	VAR_25	]	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	VAR_8	{	twoIntsStruct	*	data	VAR_28	data	=	(	twoIntsStruct	*	VAR_8	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_8	VAR_8	VAR_28	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_28	VAR_4	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_28	VAR_9	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_8	VAR_8	{	{	int	VAR_29	VAR_28	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	.	intOne	VAR_8	VAR_28	printIntLine	(	data	[	VAR_29	]	.	intTwo	VAR_8	VAR_28	}	}	}	else	{	{	int	VAR_29	VAR_28	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_8	{	data	[	VAR_29	]	.	intOne	=	VAR_29	VAR_28	data	[	VAR_29	]	.	intTwo	=	VAR_29	VAR_28	}	}	{	int	VAR_29	VAR_28	for	(	VAR_25	=	0	VAR_26	VAR_27	<	10	VAR_28	VAR_29	++	VAR_8	{	printIntLine	(	data	[	VAR_29	]	.	intOne	VAR_8	VAR_28	printIntLine	(	data	[	VAR_29	]	.	intTwo	VAR_8	VAR_28	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	VAR_7	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_24	if	(	VAR_13	==	NULL	)	{	exit	(	-	1	)	VAR_24	}	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	10	VAR_11	VAR_12	++	)	{	VAR_13	[	VAR_14	]	=	(	double	)	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	)	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	)	{	printDoubleLine	(	VAR_13	[	VAR_25	]	)	VAR_24	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	VAR_0	=	5	L	;	}	if	(	globalFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_1	=	5.0	;	printDoubleLine	(	*	VAR_1	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_1	twoIntsStruct	dataUninitArray	[	10	]	VAR_1	data	=	dataUninitArray	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_1	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	double	VAR_0	;	while	(	1	)	{	VAR_0	=	5.0	;	break	;	}	while	(	1	)	{	printDoubleLine	(	VAR_0	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	GLOBAL_CONST_TRUE	)	{	VAR_14	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},0
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	static	void	VAR_0	(	)	{	int64_t	data	;	data	=	5	LL	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_goodG2BSink	(	&	data	)	;	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_14	if	(	VAR_8	==	NULL	)	{	exit	(	-	1	)	VAR_14	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	VAR_14	}	else	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_14	}	}	}	if	(	staticTrue	)	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	]	)	VAR_14	}	}	}	},0
static	void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_1	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_1	{	int	VAR_4	VAR_1	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_1	VAR_4	++	VAR_3	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_1	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_1	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_goodB2GSink	(	&	data	VAR_3	VAR_1	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	0	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	}	if	(	1	)	{	printIntLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	0	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	globalFive	==	5	)	{	VAR_8	}	if	(	globalFive	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsFalse	(	)	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	break	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	.	intOne	=	VAR_4	VAR_3	data	[	VAR_4	]	.	intTwo	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	goto	source	VAR_14	source	:	VAR_14	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	)	VAR_14	}	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_4	]	=	VAR_4	VAR_3	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_goodG2BSink	(	&	data	)	VAR_3	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},0
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	VAR_4	static	void	VAR_0	(	)	{	int	*	data	VAR_4	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_4	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_4	}	{	int	VAR_5	VAR_4	for	(	VAR_1	=	0	VAR_2	VAR_3	<	10	VAR_4	VAR_5	++	)	{	data	[	VAR_5	]	=	VAR_5	VAR_4	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_goodG2BSink	(	&	data	)	VAR_4	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFalse	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	LL	;	}	if	(	staticTrue	)	{	printLongLongLine	(	data	)	;	}	},0
static	void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FALSE	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	.	intOne	)	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	5	)	{	case	6	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	default	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	switch	(	7	)	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	)	VAR_8	break	VAR_8	}	},0
static	void	FUNCTION_NAME	(	)	{	int	*	data	VAR_8	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_8	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_8	}	if	(	GLOBAL_CONST_FIVE	!=	5	)	{	printLine	(	"	STRING	"	)	VAR_8	}	else	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_9	]	)	VAR_8	}	}	}	},0
static	void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	!=	5	)	{	printLine	(	"	STRING	"	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},0
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_14	,	VAR_9	VAR_13	int	*	data	VAR_13	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_13	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_14	]	)	VAR_13	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	staticReturnsTrue	(	)	)	{	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	5	==	5	)	{	VAR_6	}	if	(	5	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	globalFive	==	5	)	{	VAR_3	}	if	(	globalFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_7	VAR_5	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_63b_badSink	(	&	VAR_9	VAR_7	VAR_5	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	else	{	data	=	(	twoIntsStruct	*	)	malloc	(	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	data	->	intOne	=	5	;	data	->	intTwo	=	6	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	int	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_63b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	globalFive	==	5	)	{	VAR_6	}	if	(	globalFive	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	staticReturnsTrue	(	)	)	{	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_8	{	int	VAR_19	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	VAR_8	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_8	VAR_8	VAR_18	if	(	data	==	NULL	VAR_8	{	exit	(	-	1	VAR_8	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_18	VAR_9	++	VAR_8	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_19	]	.	intOne	VAR_8	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	VAR_8	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_23	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_23	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_23	VAR_4	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_3	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_3	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_3	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_3	VAR_23	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	data	)	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	*	data	)	;	}	else	{	data	=	(	int	*	)	malloc	(	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	*	data	=	5	;	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	{	char	*	VAR_0	=	*	VAR_1	;	printLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	globalTrue	)	{	VAR_3	}	if	(	globalTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	STATIC_CONST_TRUE	)	{	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	;	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	int64_t	data	=	*	dataPtr	;	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	;	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	globalReturnsTrue	(	)	)	{	VAR_6	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	staticFive	==	5	)	{	VAR_6	}	if	(	staticFive	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	globalReturnsTrue	(	)	)	{	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	globalTrue	)	{	VAR_3	}	if	(	globalTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	ALLOCA	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_63b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_6	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_7	VAR_5	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	if	(	VAR_9	==	NULL	VAR_7	{	exit	(	-	1	VAR_7	VAR_5	}	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_64b_badSink	(	&	VAR_9	VAR_7	VAR_5	},1
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	{	long	VAR_0	=	*	VAR_1	;	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	else	{	data	.	intOne	=	1	;	data	.	intTwo	=	2	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	VAR_6	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printWLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	twoIntsStruct	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	data	->	intOne	)	VAR_8	printIntLine	(	data	->	intTwo	)	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	globalTrue	)	{	VAR_6	}	if	(	globalTrue	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_23	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_23	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_23	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_23	VAR_4	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	VAR_3	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	VAR_3	VAR_23	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_64b_badSink	(	&	VAR_2	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	staticReturnsTrue	(	)	)	{	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	5	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	5	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	double	VAR_1	[	10	VAR_2	VAR_27	VAR_21	=	VAR_1	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_27	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	VAR_2	=	(	double	)	VAR_10	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	VAR_2	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_16	=	0	VAR_17	VAR_18	<	10	VAR_19	VAR_20	++	)	{	VAR_21	[	VAR_22	VAR_2	=	(	double	)	VAR_23	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	VAR_2	)	VAR_27	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	switch	(	6	)	{	case	6	:	VAR_3	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	switch	(	7	)	{	case	7	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	goto	source	VAR_6	source	:	VAR_6	goto	sink	VAR_6	sink	:	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_17	,	VAR_12	VAR_16	double	*	VAR_0	VAR_16	double	VAR_1	[	10	VAR_2	VAR_16	VAR_0	=	VAR_1	VAR_16	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	VAR_16	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	{	int	VAR_17	VAR_16	for	(	VAR_13	=	0	VAR_14	VAR_15	<	10	VAR_16	VAR_17	++	)	{	printDoubleLine	(	VAR_0	[	VAR_17	VAR_2	)	VAR_16	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	staticFive	==	5	)	{	VAR_3	}	if	(	staticFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	twoIntsStruct	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	data	.	intOne	)	VAR_8	printIntLine	(	data	.	intTwo	)	VAR_8	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5.0	;	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	goto	source	VAR_3	source	:	VAR_3	goto	sink	VAR_3	sink	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	globalTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	globalTrue	)	{	VAR_6	}	if	(	globalTrue	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	VAR_6	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	switch	(	6	)	{	case	6	:	VAR_3	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	switch	(	7	)	{	case	7	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	5	==	5	)	{	VAR_6	}	if	(	5	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	goto	source	VAR_3	source	:	VAR_3	goto	sink	VAR_3	sink	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_8	{	int	VAR_19	,	VAR_14	VAR_18	int	*	data	VAR_18	data	=	(	int	*	VAR_8	malloc	(	10	*	sizeof	(	int	VAR_8	VAR_8	VAR_18	if	(	data	==	NULL	VAR_8	{	exit	(	-	1	VAR_8	VAR_18	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_18	VAR_9	++	VAR_8	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_19	]	VAR_8	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	wchar_t	*	data	=	*	dataPtr	;	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	while	(	1	)	{	VAR_3	break	VAR_3	}	while	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	break	VAR_3	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	while	(	1	)	{	VAR_3	break	VAR_3	}	while	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printDoubleLine	(	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	L	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printWLine	(	data	)	;	}	else	{	data	=	L	"	STRING	"	;	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_63b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	switch	(	6	)	{	case	6	:	VAR_3	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	switch	(	7	)	{	case	7	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	globalReturnsTrue	(	)	)	{	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	STATIC_CONST_TRUE	)	{	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	globalReturnsTrue	(	)	)	{	VAR_6	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	*	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	while	(	1	)	{	VAR_3	break	VAR_3	}	while	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printLine	(	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_7	VAR_5	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	if	(	VAR_9	==	NULL	VAR_7	{	exit	(	-	1	VAR_7	VAR_5	}	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_63b_badSink	(	&	VAR_9	VAR_7	VAR_5	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_63b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	globalTrue	)	{	VAR_3	}	if	(	globalTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_63b_badSink	(	&	VAR_2	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	5	==	5	)	{	VAR_3	}	if	(	5	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	staticReturnsTrue	(	)	)	{	VAR_6	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	5	==	5	)	{	VAR_3	}	if	(	5	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	globalFive	==	5	)	{	VAR_6	}	if	(	globalFive	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	staticTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	while	(	1	)	{	VAR_3	break	VAR_3	}	while	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	break	VAR_3	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	char	*	*	VAR_0	=	(	char	*	*	)	VAR_1	;	char	*	VAR_2	=	(	*	VAR_3	)	;	printLine	(	VAR_2	)	;	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printDoubleLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	staticFive	==	5	)	{	VAR_3	}	if	(	staticFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	5	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printIntLine	(	data	)	;	}	else	{	data	=	5	;	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	while	(	1	)	{	VAR_3	break	VAR_3	}	while	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	break	VAR_3	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	break	VAR_8	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_64b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	double	*	FUNCTION_NAME	)	{	double	VAR_0	=	*	VAR_1	;	printDoubleLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	1	)	{	VAR_6	}	if	(	1	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	while	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	break	VAR_14	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	VAR_21	==	NULL	)	{	exit	(	-	1	)	VAR_27	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_27	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_16	=	0	VAR_17	VAR_18	<	10	VAR_19	VAR_20	++	)	{	VAR_21	[	VAR_22	]	=	(	double	)	VAR_23	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	malloc	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_64b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	staticTrue	)	{	VAR_3	}	if	(	staticTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	;	double	*	VAR_2	=	(	*	VAR_3	)	;	printDoubleLine	(	*	VAR_2	)	;	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	;	int	*	data	=	(	*	dataPtr	)	;	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	VAR_8	{	int	VAR_19	,	VAR_14	VAR_18	int	*	data	VAR_18	data	=	(	int	*	VAR_8	ALLOCA	(	10	*	sizeof	(	int	VAR_8	VAR_8	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_18	VAR_9	++	VAR_8	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_19	]	VAR_8	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	staticFive	==	5	)	{	VAR_6	}	if	(	staticFive	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_6	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_6	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_6	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	globalTrue	)	{	VAR_6	}	if	(	globalTrue	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	staticFive	==	5	)	{	VAR_3	}	if	(	staticFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	globalFive	==	5	)	{	VAR_6	}	if	(	globalFive	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	staticTrue	)	{	VAR_6	}	if	(	staticTrue	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	switch	(	6	)	{	case	6	:	VAR_3	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	switch	(	7	)	{	case	7	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	globalTrue	)	{	VAR_3	}	if	(	globalTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	int	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_64b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	STATIC_CONST_TRUE	)	{	VAR_6	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_23	int	dataUninitArray	[	10	]	VAR_23	data	=	dataUninitArray	VAR_23	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_23	VAR_4	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	VAR_3	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	VAR_3	VAR_23	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	5	==	5	)	{	VAR_3	}	if	(	5	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	globalReturnsTrue	(	)	)	{	VAR_6	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	staticFive	==	5	)	{	VAR_3	}	if	(	staticFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	STATIC_CONST_TRUE	)	{	VAR_6	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	int	*	FUNCTION_NAME	)	{	int	data	=	*	dataPtr	;	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	twoIntsStruct	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int64_t	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printLongLongLine	(	data	)	VAR_8	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_64b_badSink	(	&	VAR_2	)	;	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	wchar_t	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__wchar_t_pointer_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	goto	source	VAR_6	source	:	VAR_6	goto	sink	VAR_6	sink	:	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	double	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printDoubleLine	(	VAR_0	)	VAR_9	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_27	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_27	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_27	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	VAR_8	[	VAR_9	]	=	(	double	)	VAR_10	VAR_27	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_28	VAR_27	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	else	{	{	int	VAR_28	VAR_27	for	(	VAR_16	=	0	VAR_17	VAR_18	<	10	VAR_19	VAR_20	++	)	{	VAR_21	[	VAR_22	]	=	(	double	)	VAR_23	VAR_27	}	}	{	int	VAR_28	VAR_27	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	)	{	printDoubleLine	(	VAR_21	[	VAR_28	]	)	VAR_27	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	globalReturnsTrue	(	)	)	{	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_8	{	int	VAR_19	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	twoIntsStruct	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_18	VAR_9	++	VAR_8	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_19	]	.	intOne	VAR_8	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	VAR_8	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	char	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_64b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLine	(	VAR_0	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	staticFive	==	5	)	{	VAR_3	}	if	(	staticFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printLongLongLine	(	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	long	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printLongLine	(	VAR_0	)	VAR_9	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	int	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printIntLine	(	*	data	)	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_6	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_63b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	while	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	break	VAR_14	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	VAR_6	VAR_14	break	VAR_14	}	switch	(	7	VAR_6	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	VAR_6	VAR_14	break	VAR_14	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__double_pointer_64b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_63b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	;	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	data	=	5	LL	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLongLine	(	data	)	;	}	else	{	data	=	5	LL	;	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	;	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	staticReturnsTrue	(	)	)	{	VAR_6	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	5	==	5	)	{	VAR_3	}	if	(	5	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	5	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	5	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_35	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_35	if	(	globalReturnsTrueOrFalse	(	VAR_6	VAR_6	{	{	int	VAR_36	VAR_35	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_35	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_35	}	}	}	else	{	{	int	VAR_36	VAR_35	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_35	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_6	VAR_6	{	{	int	VAR_36	VAR_35	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_29	[	VAR_36	]	VAR_6	VAR_35	}	}	}	else	{	{	int	VAR_36	VAR_35	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	VAR_6	{	VAR_29	[	VAR_30	]	=	(	double	VAR_6	VAR_31	VAR_35	}	}	{	int	VAR_36	VAR_35	for	(	VAR_32	=	0	VAR_33	VAR_34	<	10	VAR_35	VAR_36	++	VAR_6	{	printDoubleLine	(	VAR_29	[	VAR_36	]	VAR_6	VAR_35	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	malloc	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	if	(	data	==	NULL	VAR_4	{	exit	(	-	1	VAR_4	VAR_2	}	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_63b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	VAR_6	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	;	printLine	(	VAR_0	)	;	if	(	VAR_0	)	{	return	True	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	;	printDoubleLine	(	*	VAR_0	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_7	VAR_5	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	VAR_2	=	(	double	*	VAR_7	VAR_3	(	10	*	sizeof	(	double	VAR_7	VAR_7	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	]	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_64b_badSink	(	&	VAR_9	VAR_7	VAR_5	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	int	dataUninitArray	[	10	]	;	data	=	dataUninitArray	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	staticTrue	)	{	VAR_6	}	if	(	staticTrue	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	dataPtr	=	(	twoIntsStruct	*	)	dataVoidPtr	;	twoIntsStruct	data	=	(	*	dataPtr	)	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printLongLongLine	(	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	globalFive	==	5	)	{	VAR_3	}	if	(	globalFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	STATIC_CONST_TRUE	)	{	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	staticTrue	)	{	VAR_3	}	if	(	staticTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	VAR_7	VAR_5	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	double	VAR_2	[	10	VAR_3	VAR_5	VAR_9	=	VAR_2	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	VAR_3	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_63b_badSink	(	&	VAR_9	VAR_7	VAR_5	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_8	{	int	VAR_19	,	VAR_14	VAR_18	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	VAR_8	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_8	VAR_8	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_18	VAR_9	++	VAR_8	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_19	]	.	intOne	VAR_8	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	VAR_8	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	VAR_6	VAR_14	break	VAR_14	}	switch	(	7	VAR_6	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	VAR_6	VAR_14	break	VAR_14	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_14	,	VAR_9	VAR_13	int	*	data	VAR_13	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_13	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_13	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_13	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_14	]	)	VAR_13	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_18	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_18	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_18	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	.	intOne	=	VAR_19	VAR_18	data	[	VAR_19	]	.	intTwo	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	.	intOne	)	VAR_18	printIntLine	(	data	[	VAR_19	]	.	intTwo	)	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	GLOBAL_CONST_TRUE	)	{	VAR_6	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_14	,	VAR_9	VAR_13	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_13	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_14	]	.	intOne	)	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	)	VAR_13	}	}	}	},1
void	FUNCTION_NAME	(	VAR_11	{	int	VAR_25	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	VAR_11	VAR_2	(	10	*	sizeof	(	double	VAR_11	VAR_11	VAR_24	if	(	VAR_13	==	NULL	VAR_11	{	exit	(	-	1	VAR_11	VAR_24	}	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	VAR_11	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	(	10	/	2	VAR_11	VAR_24	VAR_12	++	VAR_11	{	VAR_13	[	VAR_14	]	=	(	double	VAR_11	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	VAR_11	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	VAR_11	{	printDoubleLine	(	VAR_13	[	VAR_25	]	VAR_11	VAR_24	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__struct_pointer_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	5	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	5	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	1	)	{	VAR_3	}	if	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	VAR_2	=	(	double	*	)	VAR_3	(	10	*	sizeof	(	double	)	)	;	if	(	VAR_2	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_63b_badSink	(	&	VAR_2	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	dataPtr	=	(	int	*	)	dataVoidPtr	;	int	data	=	(	*	dataPtr	)	;	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_11	{	int	VAR_25	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	VAR_1	=	(	double	*	VAR_11	VAR_2	(	10	*	sizeof	(	double	VAR_11	VAR_11	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	VAR_11	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	(	10	/	2	VAR_11	VAR_24	VAR_12	++	VAR_11	{	VAR_13	[	VAR_14	]	=	(	double	VAR_11	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	VAR_11	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	VAR_11	{	printDoubleLine	(	VAR_13	[	VAR_25	]	VAR_11	VAR_24	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	long	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	long	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__long_63b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	globalFive	==	5	)	{	VAR_3	}	if	(	globalFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	STATIC_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_35	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_35	if	(	VAR_29	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_35	}	if	(	globalReturnsTrueOrFalse	(	VAR_6	VAR_6	{	{	int	VAR_36	VAR_35	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_35	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_35	}	}	}	else	{	{	int	VAR_36	VAR_35	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	]	=	(	double	VAR_6	VAR_18	VAR_35	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_6	VAR_6	{	{	int	VAR_36	VAR_35	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_29	[	VAR_36	]	VAR_6	VAR_35	}	}	}	else	{	{	int	VAR_36	VAR_35	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	VAR_6	{	VAR_29	[	VAR_30	]	=	(	double	VAR_6	VAR_31	VAR_35	}	}	{	int	VAR_36	VAR_35	for	(	VAR_32	=	0	VAR_33	VAR_34	<	10	VAR_35	VAR_36	++	VAR_6	{	printDoubleLine	(	VAR_29	[	VAR_36	]	VAR_6	VAR_35	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	5	L	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLongLine	(	VAR_0	)	;	}	else	{	VAR_0	=	5	L	;	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	staticTrue	)	{	VAR_3	}	if	(	staticTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	5	==	5	)	{	VAR_3	}	if	(	5	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int64_t	*	dataPtr	=	(	int64_t	*	)	dataVoidPtr	;	int64_t	data	=	(	*	dataPtr	)	;	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	*	VAR_1	VAR_5	{	int	VAR_6	VAR_5	for	(	VAR_2	=	0	VAR_3	VAR_4	<	10	VAR_5	VAR_6	++	)	{	printDoubleLine	(	VAR_0	[	VAR_6	]	)	VAR_5	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	5	==	5	)	{	VAR_3	}	if	(	5	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_1	=	(	double	*	)	VAR_2	(	sizeof	(	double	)	)	;	if	(	VAR_3	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_3	=	5.0	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printDoubleLine	(	*	VAR_3	)	;	}	else	{	VAR_3	=	(	double	*	)	VAR_4	(	sizeof	(	double	)	)	;	if	(	VAR_3	==	NULL	)	{	exit	(	-	1	)	;	}	*	VAR_3	=	5.0	;	printDoubleLine	(	*	VAR_3	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	;	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	globalReturnsTrue	(	)	)	{	VAR_3	}	if	(	globalReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	;	printDoubleLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	double	*	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printDoubleLine	(	*	VAR_0	)	VAR_9	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	1	)	{	VAR_6	}	if	(	1	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	long	*	VAR_0	=	(	long	*	)	VAR_1	;	long	VAR_2	=	(	*	VAR_3	)	;	printLongLine	(	VAR_2	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	staticTrue	)	{	VAR_3	}	if	(	staticTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	twoIntsStruct	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_63b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	double	VAR_2	[	10	VAR_3	;	VAR_1	=	VAR_2	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_64b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	switch	(	6	)	{	case	6	:	VAR_6	break	VAR_6	default	:	printLine	(	"	STRING	"	)	VAR_6	break	VAR_6	}	switch	(	7	)	{	case	7	:	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	break	VAR_6	default	:	printLine	(	"	STRING	"	)	VAR_6	break	VAR_6	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	;	CWE457_Use_of_Uninitialized_Variable__int_pointer_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	while	(	1	)	{	VAR_6	break	VAR_6	}	while	(	1	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	break	VAR_6	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	1	)	{	VAR_3	}	if	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	break	VAR_8	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	staticReturnsTrue	(	)	)	{	VAR_6	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	*	data	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printLongLongLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	staticTrue	)	{	;	}	if	(	staticTrue	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	int	*	*	FUNCTION_NAME	)	{	int	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	switch	(	6	)	{	case	6	:	VAR_3	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	switch	(	7	)	{	case	7	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	twoIntsStruct	dataUninitArray	[	10	]	VAR_2	data	=	dataUninitArray	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_64b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	;	printLongLine	(	VAR_0	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_6	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	1	)	{	VAR_3	}	if	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_4	,	VAR_9	VAR_8	wchar_t	*	data	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_8	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	printWLine	(	data	)	VAR_8	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_23	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_23	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_23	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_23	VAR_4	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_3	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_3	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_3	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_3	VAR_23	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printIntLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	staticTrue	)	{	VAR_6	}	if	(	staticTrue	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	;	;	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	if	(	globalReturnsTrueOrFalse	(	)	)	{	VAR_18	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	else	{	{	int	VAR_19	VAR_18	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	)	{	printIntLine	(	data	[	VAR_19	]	)	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	GLOBAL_CONST_TRUE	)	{	VAR_6	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	1	)	{	VAR_6	}	if	(	1	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	1	)	{	;	}	if	(	1	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	switch	(	6	VAR_6	{	case	6	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	VAR_6	VAR_14	break	VAR_14	}	switch	(	7	VAR_6	{	case	7	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	break	VAR_14	default	:	printLine	(	"	STRING	"	VAR_6	VAR_14	break	VAR_14	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	switch	(	6	)	{	case	6	:	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	switch	(	7	)	{	case	7	:	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	break	;	default	:	printLine	(	"	STRING	"	)	;	break	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	staticFive	==	5	)	{	VAR_6	}	if	(	staticFive	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_8	{	int	VAR_19	,	VAR_14	VAR_18	int	*	data	VAR_18	int	dataUninitArray	[	10	]	VAR_18	data	=	dataUninitArray	VAR_18	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_5	=	0	VAR_6	VAR_7	<	(	10	/	2	VAR_8	VAR_18	VAR_9	++	VAR_8	{	data	[	VAR_19	]	=	VAR_19	VAR_18	}	}	}	for	(	VAR_10	=	0	VAR_11	VAR_12	<	1	VAR_13	VAR_14	++	VAR_8	{	{	int	VAR_19	VAR_18	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_8	{	printIntLine	(	data	[	VAR_19	]	VAR_8	VAR_18	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printWLine	(	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printDoubleLine	(	*	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	1	)	{	VAR_3	}	if	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	switch	(	6	)	{	case	6	:	VAR_3	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	switch	(	7	)	{	case	7	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	break	VAR_3	default	:	printLine	(	"	STRING	"	)	VAR_3	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	staticReturnsTrue	(	)	)	{	VAR_3	}	if	(	staticReturnsTrue	(	)	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	;	twoIntsStruct	*	data	=	(	*	dataPtr	)	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	while	(	1	)	{	VAR_3	break	VAR_3	}	while	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	break	VAR_3	}	},1
void	FUNCTION_NAME	(	)	{	int64_t	data	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLongLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrueOrFalse	(	)	)	{	;	}	else	{	VAR_0	=	"	STRING	"	;	}	if	(	globalReturnsTrueOrFalse	(	)	)	{	printLine	(	VAR_0	)	;	}	else	{	VAR_0	=	"	STRING	"	;	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	globalFive	==	5	)	{	VAR_3	}	if	(	globalFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	long	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__long_64b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printLongLine	(	VAR_0	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	GLOBAL_CONST_TRUE	)	{	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	globalTrue	)	{	VAR_3	}	if	(	globalTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	char	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	char	*	VAR_1	;	;	CWE457_Use_of_Uninitialized_Variable__char_pointer_63b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_17	,	VAR_12	VAR_16	double	*	VAR_0	VAR_16	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_16	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	VAR_16	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	{	int	VAR_17	VAR_16	for	(	VAR_13	=	0	VAR_14	VAR_15	<	10	VAR_16	VAR_17	++	)	{	printDoubleLine	(	VAR_1	[	VAR_17	]	)	VAR_16	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_FIVE	==	5	)	{	;	}	if	(	STATIC_CONST_FIVE	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	while	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	break	VAR_14	}	while	(	1	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	break	VAR_14	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	goto	source	VAR_3	source	:	VAR_3	goto	sink	VAR_3	sink	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	1	)	{	VAR_3	}	if	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	FUNCTION_NAME	)	{	twoIntsStruct	data	=	*	dataPtr	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	1	)	{	VAR_3	}	if	(	1	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	GLOBAL_CONST_TRUE	)	{	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int	*	data	;	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_14	,	VAR_9	VAR_13	twoIntsStruct	*	data	VAR_13	twoIntsStruct	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_13	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_14	]	.	intOne	)	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	)	VAR_13	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	goto	source	VAR_3	source	:	VAR_3	goto	sink	VAR_3	sink	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	globalTrue	)	{	VAR_3	}	if	(	globalTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	while	(	1	)	{	VAR_6	break	VAR_6	}	while	(	1	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	break	VAR_6	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_5	,	VAR_10	VAR_9	char	*	VAR_0	VAR_9	for	(	VAR_1	=	0	VAR_2	VAR_3	<	1	VAR_4	VAR_5	++	)	{	VAR_9	}	for	(	VAR_6	=	0	VAR_7	VAR_8	<	1	VAR_9	VAR_10	++	)	{	printLine	(	VAR_0	)	VAR_9	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_TRUE	)	{	;	}	if	(	GLOBAL_CONST_TRUE	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_6	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	switch	(	6	)	{	case	6	:	VAR_6	break	VAR_6	default	:	printLine	(	"	STRING	"	)	VAR_6	break	VAR_6	}	switch	(	7	)	{	case	7	:	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	break	VAR_6	default	:	printLine	(	"	STRING	"	)	VAR_6	break	VAR_6	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	globalTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	int	*	*	dataPtr	=	(	int	*	*	)	dataVoidPtr	VAR_3	int	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalReturnsTrue	(	VAR_6	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	staticTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	staticTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_35	double	VAR_1	[	10	VAR_2	VAR_35	VAR_29	=	VAR_1	VAR_35	if	(	globalReturnsTrueOrFalse	(	VAR_6	VAR_6	{	{	int	VAR_36	VAR_35	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_35	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_35	}	}	}	else	{	{	int	VAR_36	VAR_35	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	VAR_16	[	VAR_17	VAR_2	=	(	double	VAR_6	VAR_18	VAR_35	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_6	VAR_6	{	{	int	VAR_36	VAR_35	for	(	VAR_19	=	0	VAR_20	VAR_21	<	10	VAR_22	VAR_23	++	VAR_6	{	printDoubleLine	(	VAR_29	[	VAR_36	VAR_2	VAR_6	VAR_35	}	}	}	else	{	{	int	VAR_36	VAR_35	for	(	VAR_24	=	0	VAR_25	VAR_26	<	10	VAR_27	VAR_28	++	VAR_6	{	VAR_29	[	VAR_30	VAR_2	=	(	double	VAR_6	VAR_31	VAR_35	}	}	{	int	VAR_36	VAR_35	for	(	VAR_32	=	0	VAR_33	VAR_34	<	10	VAR_35	VAR_36	++	VAR_6	{	printDoubleLine	(	VAR_29	[	VAR_36	VAR_2	VAR_6	VAR_35	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	STATIC_CONST_TRUE	)	{	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	;	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	wchar_t	*	*	dataPtr	=	(	wchar_t	*	*	)	dataVoidPtr	;	wchar_t	*	data	=	(	*	dataPtr	)	;	printWLine	(	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	while	(	1	)	{	VAR_6	break	VAR_6	}	while	(	1	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	break	VAR_6	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_7	VAR_5	void	VAR_0	(	VAR_7	{	double	*	VAR_1	VAR_5	double	VAR_2	[	10	VAR_3	VAR_5	VAR_9	=	VAR_2	VAR_5	{	int	VAR_11	VAR_5	for	(	VAR_4	=	0	VAR_5	VAR_6	<	(	10	/	2	VAR_7	VAR_5	VAR_8	++	VAR_7	{	VAR_9	[	VAR_10	VAR_3	=	(	double	VAR_7	VAR_11	VAR_5	}	}	CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_64b_badSink	(	&	VAR_9	VAR_7	VAR_5	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	staticTrue	)	{	VAR_3	}	if	(	staticTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	twoIntsStruct	*	data	VAR_2	data	=	(	twoIntsStruct	*	VAR_4	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	.	intOne	=	VAR_5	VAR_2	data	[	VAR_5	]	.	intTwo	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_64b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	wchar_t	*	data	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printWLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticReturnsTrue	(	)	)	{	;	}	if	(	staticReturnsTrue	(	)	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	GLOBAL_CONST_TRUE	)	{	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	{	twoIntsStruct	*	data	=	*	dataPtr	;	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	double	VAR_1	[	10	VAR_2	VAR_6	VAR_0	=	VAR_1	VAR_6	switch	(	6	)	{	case	6	:	VAR_6	break	VAR_6	default	:	printLine	(	"	STRING	"	)	VAR_6	break	VAR_6	}	switch	(	7	)	{	case	7	:	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_0	[	VAR_7	VAR_2	)	VAR_6	}	}	break	VAR_6	default	:	printLine	(	"	STRING	"	)	VAR_6	break	VAR_6	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	}	while	(	1	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	break	VAR_8	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	VAR_4	VAR_2	void	VAR_0	(	VAR_4	{	int	*	data	VAR_2	data	=	(	int	*	VAR_4	ALLOCA	(	10	*	sizeof	(	int	VAR_4	VAR_4	VAR_2	{	int	VAR_5	VAR_2	for	(	VAR_1	=	0	VAR_2	VAR_3	<	(	10	/	2	VAR_4	VAR_2	VAR_5	++	VAR_4	{	data	[	VAR_5	]	=	VAR_5	VAR_2	}	}	CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_64b_badSink	(	&	data	VAR_4	VAR_2	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_23	twoIntsStruct	dataUninitArray	[	10	]	VAR_23	data	=	dataUninitArray	VAR_23	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_23	VAR_4	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_3	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_3	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_3	{	data	[	VAR_24	]	.	intOne	=	VAR_24	VAR_23	data	[	VAR_24	]	.	intTwo	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	.	intOne	VAR_3	VAR_23	printIntLine	(	data	[	VAR_24	]	.	intTwo	VAR_3	VAR_23	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	goto	source	VAR_14	source	:	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	goto	sink	VAR_14	sink	:	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	twoIntsStruct	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	GLOBAL_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	1	)	{	;	}	if	(	1	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	while	(	1	)	{	;	break	;	}	while	(	1	)	{	printIntLine	(	*	data	)	;	break	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	;	if	(	5	==	5	)	{	;	}	if	(	5	==	5	)	{	printIntLine	(	data	->	intOne	)	;	printIntLine	(	data	->	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalFive	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	if	(	staticFive	==	5	)	{	;	}	if	(	staticFive	==	5	)	{	printIntLine	(	*	data	)	;	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	globalFive	==	5	)	{	VAR_3	}	if	(	globalFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	malloc	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_FIVE	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_14	,	VAR_9	VAR_13	int	*	data	VAR_13	int	dataUninitArray	[	10	]	VAR_13	data	=	dataUninitArray	VAR_13	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_13	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_14	]	)	VAR_13	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	globalTrue	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	malloc	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	VAR_3	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	goto	source	VAR_8	source	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	goto	sink	VAR_8	sink	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	if	(	staticTrue	)	{	VAR_3	}	if	(	staticTrue	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalReturnsTrue	(	VAR_3	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	VAR_8	==	NULL	VAR_6	{	exit	(	-	1	VAR_6	VAR_14	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	twoIntsStruct	*	*	dataPtr	=	(	twoIntsStruct	*	*	)	dataVoidPtr	VAR_3	twoIntsStruct	*	data	=	(	*	dataPtr	)	VAR_3	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	int	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	VAR_17	,	VAR_12	VAR_16	double	*	VAR_0	VAR_16	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_16	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_16	}	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	)	{	VAR_16	}	for	(	VAR_8	=	0	VAR_9	VAR_10	<	1	VAR_11	VAR_12	++	)	{	{	int	VAR_17	VAR_16	for	(	VAR_13	=	0	VAR_14	VAR_15	<	10	VAR_16	VAR_17	++	)	{	printDoubleLine	(	VAR_1	[	VAR_17	]	)	VAR_16	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	VAR_0	=	(	double	*	)	VAR_1	;	double	VAR_2	=	(	*	VAR_3	)	;	printDoubleLine	(	VAR_2	)	;	},1
void	FUNCTION_NAME	(	)	{	int	VAR_14	,	VAR_9	VAR_13	twoIntsStruct	*	data	VAR_13	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_13	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_13	}	for	(	VAR_0	=	0	VAR_1	VAR_2	<	1	VAR_3	VAR_4	++	)	{	VAR_13	}	for	(	VAR_5	=	0	VAR_6	VAR_7	<	1	VAR_8	VAR_9	++	)	{	{	int	VAR_14	VAR_13	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	)	{	printIntLine	(	data	[	VAR_14	]	.	intOne	)	VAR_13	printIntLine	(	data	[	VAR_14	]	.	intTwo	)	VAR_13	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},1
void	FUNCTION_NAME	(	)	{	char	*	VAR_0	;	if	(	globalReturnsTrue	(	)	)	{	;	}	if	(	globalReturnsTrue	(	)	)	{	printLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	goto	source	VAR_6	source	:	VAR_6	goto	sink	VAR_6	sink	:	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	double	VAR_1	[	10	VAR_2	VAR_14	VAR_8	=	VAR_1	VAR_14	if	(	globalTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	VAR_2	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	globalTrue	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	VAR_2	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	goto	source	VAR_3	source	:	VAR_3	goto	sink	VAR_3	sink	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	VAR_1	==	NULL	)	{	exit	(	-	1	)	VAR_6	}	if	(	5	==	5	)	{	VAR_6	}	if	(	5	==	5	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_8	data	=	(	int	*	VAR_3	malloc	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_8	if	(	data	==	NULL	VAR_3	{	exit	(	-	1	VAR_3	VAR_8	}	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	VAR_3	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	GLOBAL_CONST_TRUE	)	{	VAR_3	}	if	(	GLOBAL_CONST_TRUE	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	5	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	GLOBAL_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	globalFive	==	5	)	{	VAR_3	}	if	(	globalFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	int	*	data	VAR_23	data	=	(	int	*	VAR_3	ALLOCA	(	10	*	sizeof	(	int	VAR_3	VAR_3	VAR_23	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_23	VAR_4	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	}	if	(	globalReturnsTrueOrFalse	(	VAR_3	VAR_3	{	{	int	VAR_24	VAR_23	for	(	VAR_10	=	0	VAR_11	VAR_12	<	10	VAR_13	VAR_14	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	VAR_3	VAR_23	}	}	}	else	{	{	int	VAR_24	VAR_23	for	(	VAR_15	=	0	VAR_16	VAR_17	<	10	VAR_18	VAR_19	++	VAR_3	{	data	[	VAR_24	]	=	VAR_24	VAR_23	}	}	{	int	VAR_24	VAR_23	for	(	VAR_20	=	0	VAR_21	VAR_22	<	10	VAR_23	VAR_24	++	VAR_3	{	printIntLine	(	data	[	VAR_24	]	VAR_3	VAR_23	}	}	}	},1
void	FUNCTION_NAME	(	FUNCTION_NAME	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	twoIntsStruct	*	data	;	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	;	if	(	data	==	NULL	)	{	exit	(	-	1	)	;	}	;	CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_63b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	double	*	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	double	*	VAR_1	;	double	VAR_2	[	10	VAR_3	;	VAR_1	=	VAR_2	;	;	CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_63b_badSink	(	&	VAR_1	)	;	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	data	=	(	int	*	)	ALLOCA	(	10	*	sizeof	(	int	)	)	VAR_3	if	(	staticFive	==	5	)	{	VAR_3	}	if	(	staticFive	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	globalFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	data	=	(	twoIntsStruct	*	VAR_3	ALLOCA	(	10	*	sizeof	(	twoIntsStruct	VAR_3	VAR_3	VAR_8	switch	(	6	VAR_3	{	case	6	:	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	switch	(	7	VAR_3	{	case	7	:	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	break	VAR_8	default	:	printLine	(	"	STRING	"	VAR_3	VAR_8	break	VAR_8	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	data	;	if	(	GLOBAL_CONST_FIVE	==	5	)	{	;	}	if	(	GLOBAL_CONST_FIVE	==	5	)	{	printIntLine	(	data	.	intOne	)	;	printIntLine	(	data	.	intTwo	)	;	}	},1
void	FUNCTION_NAME	(	VAR_11	{	int	VAR_25	,	VAR_20	VAR_24	double	*	VAR_0	VAR_24	double	VAR_1	[	10	VAR_2	VAR_24	VAR_13	=	VAR_1	VAR_24	for	(	VAR_3	=	0	VAR_4	VAR_5	<	1	VAR_6	VAR_7	++	VAR_11	{	{	int	VAR_25	VAR_24	for	(	VAR_8	=	0	VAR_9	VAR_10	<	(	10	/	2	VAR_11	VAR_24	VAR_12	++	VAR_11	{	VAR_13	[	VAR_14	VAR_2	=	(	double	VAR_11	VAR_15	VAR_24	}	}	}	for	(	VAR_16	=	0	VAR_17	VAR_18	<	1	VAR_19	VAR_20	++	VAR_11	{	{	int	VAR_25	VAR_24	for	(	VAR_21	=	0	VAR_22	VAR_23	<	10	VAR_24	VAR_25	++	VAR_11	{	printDoubleLine	(	VAR_13	[	VAR_25	VAR_2	VAR_11	VAR_24	}	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	VAR_3	int	dataUninitArray	[	10	]	VAR_3	data	=	dataUninitArray	VAR_3	goto	source	VAR_3	source	:	VAR_3	goto	sink	VAR_3	sink	:	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	)	VAR_3	}	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	staticFive	==	5	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	VAR_6	{	double	*	VAR_0	VAR_14	VAR_1	=	(	double	*	VAR_6	VAR_2	(	10	*	sizeof	(	double	VAR_6	VAR_6	VAR_14	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_3	=	0	VAR_4	VAR_5	<	(	10	/	2	VAR_6	VAR_14	VAR_7	++	VAR_6	{	VAR_8	[	VAR_9	]	=	(	double	VAR_6	VAR_10	VAR_14	}	}	}	if	(	GLOBAL_CONST_FIVE	==	5	VAR_6	{	{	int	VAR_15	VAR_14	for	(	VAR_11	=	0	VAR_12	VAR_13	<	10	VAR_14	VAR_15	++	VAR_6	{	printDoubleLine	(	VAR_8	[	VAR_15	]	VAR_6	VAR_14	}	}	}	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	STATIC_CONST_TRUE	)	{	;	}	if	(	STATIC_CONST_TRUE	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	VAR_3	{	twoIntsStruct	*	data	VAR_8	twoIntsStruct	dataUninitArray	[	10	]	VAR_8	data	=	dataUninitArray	VAR_8	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_0	=	0	VAR_1	VAR_2	<	(	10	/	2	VAR_3	VAR_8	VAR_4	++	VAR_3	{	data	[	VAR_9	]	.	intOne	=	VAR_9	VAR_8	data	[	VAR_9	]	.	intTwo	=	VAR_9	VAR_8	}	}	}	if	(	STATIC_CONST_TRUE	VAR_3	{	{	int	VAR_9	VAR_8	for	(	VAR_5	=	0	VAR_6	VAR_7	<	10	VAR_8	VAR_9	++	VAR_3	{	printIntLine	(	data	[	VAR_9	]	.	intOne	VAR_3	VAR_8	printIntLine	(	data	[	VAR_9	]	.	intTwo	VAR_3	VAR_8	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	{	double	*	*	VAR_0	=	(	double	*	*	)	VAR_1	VAR_7	double	*	VAR_2	=	(	*	VAR_3	)	VAR_7	{	int	VAR_8	VAR_7	for	(	VAR_4	=	0	VAR_5	VAR_6	<	10	VAR_7	VAR_8	++	)	{	printDoubleLine	(	VAR_2	[	VAR_8	]	)	VAR_7	}	}	},1
void	FUNCTION_NAME	(	)	{	int	*	data	;	;	printIntLine	(	*	data	)	;	},1
void	FUNCTION_NAME	(	)	{	long	VAR_0	;	if	(	globalFive	==	5	)	{	;	}	if	(	globalFive	==	5	)	{	printLongLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	double	*	VAR_0	VAR_6	VAR_1	=	(	double	*	)	VAR_2	(	10	*	sizeof	(	double	)	)	VAR_6	if	(	STATIC_CONST_TRUE	)	{	VAR_6	}	if	(	STATIC_CONST_TRUE	)	{	{	int	VAR_7	VAR_6	for	(	VAR_3	=	0	VAR_4	VAR_5	<	10	VAR_6	VAR_7	++	)	{	printDoubleLine	(	VAR_1	[	VAR_7	]	)	VAR_6	}	}	}	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	if	(	globalTrue	)	{	;	}	if	(	globalTrue	)	{	printDoubleLine	(	VAR_0	)	;	}	},1
void	FUNCTION_NAME	(	)	{	twoIntsStruct	*	data	VAR_3	data	=	(	twoIntsStruct	*	)	malloc	(	10	*	sizeof	(	twoIntsStruct	)	)	VAR_3	if	(	data	==	NULL	)	{	exit	(	-	1	)	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	VAR_3	}	if	(	STATIC_CONST_FIVE	==	5	)	{	{	int	VAR_4	VAR_3	for	(	VAR_0	=	0	VAR_1	VAR_2	<	10	VAR_3	VAR_4	++	)	{	printIntLine	(	data	[	VAR_4	]	.	intOne	)	VAR_3	printIntLine	(	data	[	VAR_4	]	.	intTwo	)	VAR_3	}	}	}	},1
void	FUNCTION_NAME	(	void	*	FUNCTION_NAME	)	;	void	VAR_0	(	)	{	int64_t	data	;	;	CWE457_Use_of_Uninitialized_Variable__int64_t_64b_badSink	(	&	data	)	;	},1
void	FUNCTION_NAME	(	)	{	double	VAR_0	;	goto	source	;	source	:	;	goto	sink	;	sink	:	printDoubleLine	(	VAR_0	)	;	},1